// Generated by HLC 4.2.1 (HL v4)
#ifndef INC_haxe__Template
#define INC_haxe__Template
typedef struct _haxe__$Template *haxe__$Template;
typedef struct _haxe__Template *haxe__Template;
#include <haxe/Template.h>
#include <hl/types/ArrayObj.h>
#include <_std/String.h>
#include <hl/Class.h>
#include <hl/BaseType.h>
#include <_std/EReg.h>
#include <haxe/iterators/ArrayIterator.h>
#include <haxe/_Template/TemplateExpr.h>
#include <haxe/ds/List.h>
#include <_std/StringBuf.h>


typedef struct {
	HL__ENUM_CONSTRUCT__
	vdynamic* p0;
	vdynamic* p1;
} Enumt$ctx_beaa1da;
typedef struct {
	HL__ENUM_CONSTRUCT__
	vclosure* p0;
	hl__types__ArrayObj p1;
} Enumt$ctx_94bc686;
typedef struct {
	HL__ENUM_CONSTRUCT__
	hl__types__ArrayObj p0;
	haxe__Template p1;
} Enumt$ctx_230a434;
typedef struct {
	HL__ENUM_CONSTRUCT__
	double p0;
} Enumt$ctx_76b4836;
typedef struct {
	HL__ENUM_CONSTRUCT__
	String p0;
	hl__types__ArrayObj p1;
} Enumt$ctx_7ae704c;
struct _haxe__$Template {
	hl_type *$type;
	hl_type* __type__;
	vdynamic* __meta__;
	varray* __implementedBy__;
	String __name__;
	vdynamic* __constructor__;
	EReg splitter;
	EReg expr_splitter;
	EReg expr_trim;
	EReg expr_int;
	EReg expr_float;
	vdynamic* globals;
	haxe__iterators__ArrayIterator hxKeepArrayIterator;
};
struct _haxe__Template {
	hl_type *$type;
	venum* expr;
	vdynamic* context;
	vdynamic* macros;
	haxe__ds__List stack;
	StringBuf buf;
};
#endif

