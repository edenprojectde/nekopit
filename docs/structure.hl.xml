<!-- This file can be parsed by haxe.rtti.XmlParser -->
<haxe>
	<abstract path="Any" params="" file="/usr/share/haxe/std/Any.hx">
		<from><icast field="__cast"><c path="__cast.T"/></icast></from>
		<this><d/></this>
		<to><icast field="__promote"><c path="__promote.T"/></icast></to>
		<haxe_doc>`Any` is a type that is compatible with any other in both ways.

	This means that a value of any type can be assigned to `Any`, and
	vice-versa, a value of `Any` type can be assigned to any other type.

	It's a more type-safe alternative to `Dynamic`, because it doesn't
	support field access or operators and it's bound to monomorphs. So,
	to work with the actual value, it needs to be explicitly promoted
	to another type.</haxe_doc>
		<meta><m n=":forward.variance"/></meta>
		<impl><class path="_Any.Any_Impl_" params="" file="/usr/share/haxe/std/Any.hx" private="1" module="Any" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="Array" params="T" file="/usr/share/haxe/std/Array.hx" extern="1">
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` Array.</haxe_doc>
		</length>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending the elements of `a` to the elements of
		`this` Array.

		This operation does not modify `this` Array.

		If `a` is the empty Array `[]`, a copy of `this` Array is returned.

		The length of the returned Array is equal to the sum of `this.length`
		and `a.length`.

		If `a` is `null`, the result is unspecified.</haxe_doc>
		</concat>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a string representation of `this` Array, with `sep` separating
		each element.

		The result of this operation is equal to `Std.string(this[0]) + sep +
		Std.string(this[1]) + sep + ... + sep + Std.string(this[this.length-1])`

		If `this` is the empty Array `[]`, the result is the empty String `""`.
		If `this` has exactly one element, the result is equal to a call to
		`Std.string(this[0])`.

		If `sep` is null, the result is unspecified.</haxe_doc>
		</join>
		<pop public="1" set="method">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the last element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this.length` will decrease by 1.

		If `this` is the empty Array `[]`, null is returned and the length
		remains 0.</haxe_doc>
		</pop>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Adds the element `x` at the end of `this` Array and returns the new
		length of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` increases by 1.</haxe_doc>
		</push>
		<reverse public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc><![CDATA[Reverse the order of elements of `this` Array.

		This operation modifies `this` Array in place.

		If `this.length < 2`, `this` remains unchanged.]]></haxe_doc>
		</reverse>
		<shift public="1" set="method">
			<f a=""><x path="Null"><c path="Array.T"/></x></f>
			<haxe_doc>Removes the first element of `this` Array and returns it.

		This operation modifies `this` Array in place.

		If `this` has at least one element, `this`.length and the index of each
		remaining element is decreased by 1.

		If `this` is the empty Array `[]`, `null` is returned and the length
		remains 0.</haxe_doc>
		</shift>
		<slice public="1" set="method">
			<f a="pos:?end">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Creates a shallow copy of the range of `this` Array, starting at and
		including `pos`, up to but not including `end`.

		This operation does not modify `this` Array.

		The elements are not copied and retain their identity.

		If `end` is omitted or exceeds `this.length`, it defaults to the end of
		`this` Array.

		If `pos` or `end` are negative, their offsets are calculated from the
		end of `this` Array by `this.length + pos` and `this.length + end`
		respectively. If this yields a negative value, 0 is used instead.

		If `pos` exceeds `this.length` or if `end` is less than or equals
		`pos`, the result is `[]`.</haxe_doc>
		</slice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts `this` Array according to the comparison function `f`, where
		`f(x,y)` returns 0 if x == y, a positive Int if x > y and a
		negative Int if x < y.

		This operation modifies `this` Array in place.

		The sort operation is not guaranteed to be stable, which means that the
		order of equal elements may not be retained. For a stable Array sorting
		algorithm, `haxe.ds.ArraySort.sort()` can be used instead.

		If `f` is null, the result is unspecified.]]></haxe_doc>
		</sort>
		<splice public="1" set="method">
			<f a="pos:len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc><![CDATA[Removes `len` elements from `this` Array, starting at and including
		`pos`, an returns them.

		This operation modifies `this` Array in place.

		If `len` is < 0 or `pos` exceeds `this`.length, an empty Array [] is
		returned and `this` Array is unchanged.

		If `pos` is negative, its value is calculated from the end	of `this`
		Array by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the sum of the resulting values for `len` and `pos` exceed
		`this.length`, this operation will affect the elements from `pos` to the
		end of `this` Array.

		The length of the returned Array is equal to the new length of `this`
		Array subtracted from the original length of `this` Array. In other
		words, each element of the original `this` Array either remains in
		`this` Array or becomes an element of the returned Array.]]></haxe_doc>
		</splice>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a string representation of `this` Array.

		The result will include the individual elements' String representations
		separated by comma. The enclosing [ ] may be missing on some platforms,
		use `Std.string()` to get a String representation that is consistent
		across platforms.</haxe_doc>
		</toString>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds the element `x` at the start of `this` Array.

		This operation modifies `this` Array in place.

		`this.length` and the index of each Array element increases by 1.</haxe_doc>
		</unshift>
		<insert public="1" set="method">
			<f a="pos:x">
				<x path="Int"/>
				<c path="Array.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Inserts the element `x` at the position `pos`.

		This operation modifies `this` Array in place.

		The offset is calculated like so:

		- If `pos` exceeds `this.length`, the offset is `this.length`.
		- If `pos` is negative, the offset is calculated from the end of `this`
		  Array, i.e. `this.length + pos`. If this yields a negative value, the
		  offset is 0.
		- Otherwise, the offset is `pos`.

		If the resulting offset does not exceed `this.length`, all elements from
		and including that offset to the end of `this` Array are moved one index
		ahead.</haxe_doc>
		</insert>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurrence of `x` in `this` Array.

		This operation modifies `this` Array in place.

		If `x` is found by checking standard equality, it is removed from `this`
		Array and all following elements are reindexed accordingly. The function
		then returns true.

		If `x` is not found, `this` Array is not changed and the function
		returns false.</haxe_doc>
		</remove>
		<contains public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Returns whether `this` Array contains `x`.

		If `x` is found by checking standard equality, the function returns `true`, otherwise
		the function returns `false`.</haxe_doc>
		</contains>
		<indexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the first occurrence of `x` in `this` Array, searching front to back.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with zero index. If it is negative, it will be taken as the
		offset from the end of `this` Array to compute the starting index. If given or computed
		starting index is less than 0, the whole array will be searched, if it is greater than
		or equal to the length of `this` Array, the function returns -1.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method">
			<f a="x:?fromIndex">
				<c path="Array.T"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns position of the last occurrence of `x` in `this` Array, searching back to front.

		If `x` is found by checking standard equality, the function returns its index.

		If `x` is not found, the function returns -1.

		If `fromIndex` is specified, it will be used as the starting index to search from,
		otherwise search starts with the last element index. If it is negative, it will be
		taken as the offset from the end of `this` Array to compute the starting index. If
		given or computed starting index is greater than or equal to the length of `this` Array,
		the whole array will be searched, if it is less than 0, the function returns -1.</haxe_doc>
		</lastIndexOf>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a shallow copy of `this` Array.

		The elements are not copied and retain their identity, so
		`a[i] == a.copy()[i]` is true for any valid `i`. However,
		`a == a.copy()` is always false.</haxe_doc>
		</copy>
		<iterator public="1" get="inline" set="null" line="280">
			<f a=""><c path="haxe.iterators.ArrayIterator"><c path="Array.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<keyValueIterator public="1" get="inline" set="null" line="287">
			<f a=""><c path="haxe.iterators.ArrayKeyValueIterator"><c path="Array.T"/></c></f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an iterator of the Array indices and values.</haxe_doc>
		</keyValueIterator>
		<map public="1" params="S" get="inline" set="null" line="298">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<c path="map.S"/>
				</f>
				<c path="Array"><c path="map.S"/></c>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Creates a new Array by applying function `f` to all elements of `this`.

		The order of elements is preserved.

		If `f` is null, the result is unspecified.</haxe_doc>
		</map>
		<filter public="1" get="inline" set="null" line="316">
			<f a="f">
				<f a="">
					<c path="Array.T"/>
					<x path="Bool"/>
				</f>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<meta><m n=":runtime"/></meta>
			<haxe_doc>Returns an Array containing those elements of `this` for which `f`
		returned true.

		The individual elements are not duplicated and retain their identity.

		If `f` is null, the result is unspecified.</haxe_doc>
		</filter>
		<resize public="1" set="method">
			<f a="len">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Set the length of the Array.

		If `len` is shorter than the array's current size, the last
		`length - len` elements will be removed. If `len` is longer, the Array
		will be extended, with new elements set to a target-specific default
		value:

		- always null on dynamic targets
		- 0, 0.0 or false for Int, Float and Bool respectively on static targets
		- null for other types on static targets</haxe_doc>
		</resize>
		<new public="1" set="method">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<abstract path="Class" params="T" file="/usr/share/haxe/std/Class.hx">
		<this><x path="Class"><c path="Class.T"/></x></this>
		<haxe_doc>An abstract type that represents a Class.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-class-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="Date" params="" file="/usr/share/haxe/std/hl/_std/Date.hx" final="1">
		<date_new set="method" line="162" static="1">
			<f a="year:month:day:hours:minutes:seconds">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative"/></meta>
		</date_new>
		<date_to_string set="method" line="193" static="1">
			<f a="t:outLen">
				<x path="Int"/>
				<x path="hl.Ref"><x path="Int"/></x>
				<x path="hl.Bytes"/>
			</f>
			<meta><m n=":hlNative"/></meta>
		</date_to_string>
		<t><x path="Int"/></t>
		<toString public="1" set="method" line="131">
			<f a=""><c path="String"/></f>
			<meta><m n=":keep"/></meta>
			<haxe_doc>Returns a string representation of `this` Date in the local timezone
		using the standard format `YYYY-MM-DD HH:MM:SS`. See `DateTools.format` for
		other formatting rules.</haxe_doc>
		</toString>
		<new public="1" set="method" line="28">
			<f a="year:month:day:hour:min:sec">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new date object from the given arguments.

		The behaviour of a Date instance is only consistent across platforms if
		the the arguments describe a valid date.

		- month: 0 to 11 (note that this is zero-based)
		- day: 1 to 31
		- hour: 0 to 23
		- min: 0 to 59
		- sec: 0 to 59</haxe_doc>
		</new>
		<haxe_doc>The Date class provides a basic structure for date and time related
	information. Date instances can be created by

	- `new Date()` for a specific date,
	- `Date.now()` to obtain information about the current time,
	- `Date.fromTime()` with a given timestamp or
	- `Date.fromString()` by parsing from a String.

	There are some extra functions available in the `DateTools` class.

	In the context of Haxe dates, a timestamp is defined as the number of
	milliseconds elapsed since 1st January 1970 UTC.

	## Supported range

	Due to platform limitations, only dates in the range 1970 through 2038 are
	supported consistently. Some targets may support dates outside this range,
	depending on the OS at runtime. The `Date.fromTime` method will not work with
	timestamps outside the range on any target.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<typedef path="_EReg.ERegValue" params="" file="/usr/share/haxe/std/hl/_std/EReg.hx" private="1" module="EReg"><c path="hl.Abstract"><c path="Sereg"/></c></typedef>
	<abstract path="Enum" params="T" file="/usr/share/haxe/std/Enum.hx">
		<this><x path="Enum"><c path="Enum.T"/></x></this>
		<haxe_doc>An abstract type that represents an Enum type.

	The corresponding enum instance type is `EnumValue`.

	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="EnumValue" params="" file="/usr/share/haxe/std/EnumValue.hx">
		<this><x path="EnumValue"/></this>
		<haxe_doc>An abstract type that represents any enum value.
	See `Type` for the Haxe Reflection API.

	@see https://haxe.org/manual/types-enum-instance.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
		<impl><class path="_EnumValue.EnumValue_Impl_" params="" file="/usr/share/haxe/std/EnumValue.hx" private="1" module="EnumValue" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="List" params="T" file="/usr/share/haxe/std/List.hx"><c path="haxe.ds.List"><c path="List.T"/></c></typedef>
	<class path="Main" params="" file="Main.hx">
		<main public="1" set="method" line="7" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":keep"/></meta>
		</main>
		<meta><m n=":keep"/></meta>
	</class>
	<typedef path="Map" params="K:V" file="/usr/share/haxe/std/Map.hx"><x path="haxe.ds.Map">
	<c path="Map.K"/>
	<c path="Map.V"/>
</x></typedef>
	<typedef path="IMap" params="K:V" file="/usr/share/haxe/std/Map.hx" module="Map">
		<c path="haxe.IMap">
			<c path="IMap.K"/>
			<c path="IMap.V"/>
		</c>
		<meta>
			<m n=":dox"><e>hide</e></m>
			<m n=":deprecated"/>
		</meta>
	</typedef>
	<typedef path="_Std.Rand" params="" file="/usr/share/haxe/std/hl/_std/Std.hx" private="1" module="Std"><c path="hl.Abstract"><c path="Shl_random"/></c></typedef>
	<class path="Std" params="" file="/usr/share/haxe/std/hl/_std/Std.hx">
		<rnd static="1"><t path="_Std.Rand"/></rnd>
		<toStringDepth expr="0" line="30" static="1">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</toStringDepth>
		<rnd_sys set="method" line="36" static="1">
			<f a=""><t path="_Std.Rand"/></f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"rnd_init_system"</e>
</m></meta>
		</rnd_sys>
		<isOfType public="1" set="method" line="57" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Tells if a value `v` is of the type `t`. Returns `false` if `v` or `t` are null.

		If `t` is a class or interface with `@:generic` meta, the result is `false`.</haxe_doc>
		</isOfType>
		<string public="1" set="method" line="93" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<meta><m n=":keep"/></meta>
			<haxe_doc>Converts any value to a String.

		If `s` is of `String`, `Int`, `Float` or `Bool`, its value is returned.

		If `s` is an instance of a class and that class or one of its parent classes has
		a `toString` method, that method is called. If no such method is present, the result
		is unspecified.

		If `s` is an enum constructor without argument, the constructor's name is returned. If
		arguments exists, the constructor's name followed by the String representations of
		the arguments is returned.

		If `s` is a structure, the field names along with their values are returned. The field order
		and the operator separating field names and values are unspecified.

		If s is null, "null" is returned.</haxe_doc>
		</string>
		<__add__ set="method" line="111" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<d/>
			</f>
			<meta><m n=":keep"/></meta>
		</__add__>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="Void" params="" file="/usr/share/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Void"/></this>
		<haxe_doc>The standard `Void` type. Only `null` values can be of the type `Void`.

	@see https://haxe.org/manual/types-void.html</haxe_doc>
		<meta><m n=":coreType"/></meta>
	</abstract>
	<abstract path="Float" params="" file="/usr/share/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Float"/></this>
		<haxe_doc><![CDATA[The standard `Float` type, this is a double-precision IEEE 64bit float.

	On static targets, `null` cannot be assigned to Float. If this is necessary,
	`Null<Float>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseFloat` converts a `String` to a `Float`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Int" params="" file="/usr/share/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Int"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc><![CDATA[The standard `Int` type. Its precision depends on the platform.

	On static targets, `null` cannot be assigned to `Int`. If this is necessary,
	`Null<Int>` can be used instead.

	`Std.int` converts a `Float` to an `Int`, rounded towards 0.
	`Std.parseInt` converts a `String` to an `Int`.

	@see https://haxe.org/manual/types-basic-types.html
	@see https://haxe.org/manual/std-math-integer-math.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Single" params="" file="/usr/share/haxe/std/StdTypes.hx" module="StdTypes">
		<from><icast><x path="Float"/></icast></from>
		<this><x path="Single"/></this>
		<to><icast><x path="Float"/></icast></to>
		<haxe_doc>Single-precision IEEE 32bit float (4-byte).</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Null" params="T" file="/usr/share/haxe/std/StdTypes.hx" module="StdTypes">
		<from><icast><c path="Null.T"/></icast></from>
		<this><x path="Null"><c path="Null.T"/></x></this>
		<to><icast><c path="Null.T"/></icast></to>
		<haxe_doc><![CDATA[`Null<T>` is a wrapper that can be used to make the basic types `Int`,
	`Float` and `Bool` nullable on static targets.

	If null safety is enabled, only types wrapped in `Null<T>` are nullable.

	Otherwise, it has no effect on non-basic-types, but it can be useful as a way to document
	that `null` is an acceptable value for a method argument, return value or variable.

	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":forward"/>
			<m n=":coreType"/>
		</meta>
	</abstract>
	<abstract path="Bool" params="" file="/usr/share/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Bool"/></this>
		<haxe_doc><![CDATA[The standard Boolean type, which can either be `true` or `false`.

	On static targets, `null` cannot be assigned to `Bool`. If this is necessary,
	`Null<Bool>` can be used instead.

	@see https://haxe.org/manual/types-bool.html
	@see https://haxe.org/manual/types-nullability.html]]></haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<abstract path="Dynamic" params="T" file="/usr/share/haxe/std/StdTypes.hx" module="StdTypes">
		<this><x path="Dynamic"><c path="Dynamic.T"/></x></this>
		<haxe_doc>`Dynamic` is a special type which is compatible with all other types.

	Use of `Dynamic` should be minimized as it prevents several compiler
	checks and optimizations. See `Any` type for a safer alternative for
	representing values of any type.

	@see https://haxe.org/manual/types-dynamic.html</haxe_doc>
		<meta>
			<m n=":coreType"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<typedef path="Iterator" params="T" file="/usr/share/haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method">
				<f a=""><c path="Iterator.T"/></f>
				<haxe_doc>Returns the current item of the `Iterator` and advances to the next one.

		This method is not required to check `hasNext()` first. A call to this
		method while `hasNext()` is `false` yields unspecified behavior.

		On the other hand, iterators should not require a call to `hasNext()`
		before the first call to `next()` if an element is available.</haxe_doc>
			</next>
			<hasNext set="method">
				<f a=""><x path="Bool"/></f>
				<haxe_doc>Returns `false` if the iteration is complete, `true` otherwise.

		Usually iteration is considered to be complete if all elements of the
		underlying data structure were handled through calls to `next()`. However,
		in custom iterators any logic may be used to determine the completion
		state.</haxe_doc>
			</hasNext>
		</a>
		<haxe_doc>An `Iterator` is a structure that permits iteration over elements of type `T`.

	Any class with matching `hasNext()` and `next()` fields is considered an `Iterator`
	and can then be used e.g. in `for`-loops. This makes it easy to implement
	custom iterators.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/usr/share/haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An `Iterable` is a data structure which has an `iterator()` method.
	See `Lambda` for generic functions on iterable structures.

	@see https://haxe.org/manual/lf-iterators.html</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterator" params="K:V" file="/usr/share/haxe/std/StdTypes.hx" module="StdTypes">
		<t path="Iterator"><a>
	<value><c path="KeyValueIterator.V"/></value>
	<key><c path="KeyValueIterator.K"/></key>
</a></t>
		<haxe_doc>A `KeyValueIterator` is an `Iterator` that has a key and a value.</haxe_doc>
	</typedef>
	<typedef path="KeyValueIterable" params="K:V" file="/usr/share/haxe/std/StdTypes.hx" module="StdTypes">
		<a><keyValueIterator set="method"><f a=""><t path="KeyValueIterator">
	<c path="KeyValueIterable.K"/>
	<c path="KeyValueIterable.V"/>
</t></f></keyValueIterator></a>
		<haxe_doc>A `KeyValueIterable` is a data structure which has a `keyValueIterator()`
	method to iterate over key-value-pairs.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/usr/share/haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>`ArrayAccess` is used to indicate a class that can be accessed using brackets.
	The type parameter represents the type of the elements stored.

	This interface should be used for externs only. Haxe does not support custom
	array access on classes. However, array access can be implemented for
	abstract types.

	@see https://haxe.org/manual/types-abstract-array-access.html</haxe_doc></class>
	<class path="String" params="" file="/usr/share/haxe/std/hl/_std/String.hx">
		<fromCharCode public="1" set="method" line="180" static="1">
			<f a="code">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the String corresponding to the character code `code`.

		If `code` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</fromCharCode>
		<__alloc__ get="inline" set="null" line="219" static="1">
			<f a="b:length">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
		</__alloc__>
		<call_toString set="method" line="226" static="1">
			<f a="v">
				<d/>
				<x path="hl.Bytes"/>
			</f>
			<meta><m n=":keep"/></meta>
		</call_toString>
		<fromUCS2 get="inline" set="null" line="231" static="1">
			<f a="b">
				<x path="hl.Bytes"/>
				<c path="String"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</fromUCS2>
		<fromUTF8 set="method" line="238" static="1">
			<f a="b">
				<x path="hl.Bytes"/>
				<c path="String"/>
			</f>
			<meta><m n=":keep"/></meta>
		</fromUTF8>
		<__add__ set="method" line="244" static="1">
			<f a="a:b">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<meta><m n=":keep"/></meta>
		</__add__>
		<bytes><x path="hl.Bytes"/></bytes>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The number of characters in `this` String.</haxe_doc>
		</length>
		<toUpperCase public="1" set="method" line="33">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are upper case.</haxe_doc>
		</toUpperCase>
		<toLowerCase public="1" set="method" line="37">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a String where all characters of `this` String are lower case.</haxe_doc>
		</toLowerCase>
		<charAt public="1" set="method" line="41">
			<f a="index">
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, the empty String `""`
		is returned.</haxe_doc>
		</charAt>
		<charCodeAt public="1" set="method" line="50">
			<f a="index">
				<x path="Int"/>
				<x path="Null"><x path="Int"/></x>
			</f>
			<haxe_doc>Returns the character code at position `index` of `this` String.

		If `index` is negative or exceeds `this.length`, `null` is returned.

		To obtain the character code of a single character, `"x".code` can be
		used instead to inline the character code at compile time. Note that
		this only works on String literals of length 1.</haxe_doc>
		</charCodeAt>
		<findChar get="inline" set="null" line="57"><f a="start:len:src:srcLen">
	<x path="Int"/>
	<x path="Int"/>
	<x path="hl.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
</f></findChar>
		<indexOf public="1" set="method" line="68">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the leftmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String starting from `startIndex`.

		If `startIndex` exceeds `this.length`, -1 is returned.

		If `startIndex` is negative, the result is unspecifed.

		Otherwise the search is performed within `this` String. In either case,
		the returned position is relative to the beginning of `this` String.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</indexOf>
		<lastIndexOf public="1" set="method" line="81">
			<f a="str:?startIndex">
				<c path="String"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the position of the rightmost occurrence of `str` within `this`
		String.

		If `startIndex` is given, the search is performed within the substring
		of `this` String from 0 to `startIndex + str.length`. Otherwise the search
		is performed within `this` String. In either case, the returned position
		is relative to the beginning of `this` String.

		If `startIndex` is negative, the result is unspecifed.

		If `str` cannot be found, -1 is returned.</haxe_doc>
		</lastIndexOf>
		<split public="1" set="method" line="100">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Splits `this` String at each occurrence of `delimiter`.

		If `this` String is the empty String `""`, the result is not consistent
		across targets and may either be `[]` (on Js, Cpp) or `[""]`.

		If `delimiter` is the empty String `""`, `this` String is split into an
		Array of `this.length` elements, where the elements correspond to the
		characters of `this` String.

		If `delimiter` is not found within `this` String, the result is an Array
		with one element, which equals `this` String.

		If `delimiter` is null, the result is unspecified.

		Otherwise, `this` String is split into parts at each occurrence of
		`delimiter`. If `this` String starts (or ends) with `delimiter`, the
		result `Array` contains a leading (or trailing) empty String `""` element.
		Two subsequent delimiters also result in an empty String `""` element.</haxe_doc>
		</split>
		<substr public="1" set="method" line="126">
			<f a="pos:?len">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns `len` characters of `this` String, starting at position `pos`.

		If `len` is omitted, all characters from position `pos` to the end of
		`this` String are included.

		If `pos` is negative, its value is calculated from the end of `this`
		String by `this.length + pos`. If this yields a negative value, 0 is
		used instead.

		If the calculated position + `len` exceeds `this.length`, the characters
		from that position to the end of `this` String are returned.

		If `len` is negative, the result is unspecified.</haxe_doc>
		</substr>
		<substring public="1" set="method" line="153">
			<f a="startIndex:?endIndex">
				<x path="Int"/>
				<x path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the part of `this` String from `startIndex` to but not including `endIndex`.

		If `startIndex` or `endIndex` are negative, 0 is used instead.

		If `startIndex` exceeds `endIndex`, they are swapped.

		If the (possibly swapped) `endIndex` is omitted or exceeds
		`this.length`, `this.length` is used instead.

		If the (possibly swapped) `startIndex` exceeds `this.length`, the empty
		String `""` is returned.</haxe_doc>
		</substring>
		<toString public="1" set="method" line="176">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<toUtf8 set="method" line="199"><f a=""><x path="hl.Bytes"/></f></toUtf8>
		<__string set="method" line="203">
			<f a=""><x path="hl.Bytes"/></f>
			<meta><m n=":keep"/></meta>
		</__string>
		<__compare set="method" line="207">
			<f a="v">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":keep"/></meta>
		</__compare>
		<new public="1" set="method" line="28">
			<f a="string">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.

	A Haxe String is immutable, it is not possible to modify individual
	characters. No method of this class changes the state of `this` String.

	Strings can be constructed using the String literal syntax `"string value"`.

	String can be concatenated by using the `+` operator. If an operand is not a
	String, it is passed through `Std.string()` first.

	@see https://haxe.org/manual/std-String.html</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="StringBuf" params="" file="/usr/share/haxe/std/hl/_std/StringBuf.hx">
		<b><x path="hl.Bytes"/></b>
		<size><x path="Int"/></size>
		<pos><x path="Int"/></pos>
		<add public="1" params="T" set="method" line="56">
			<f a="x">
				<c path="add.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the representation of `x` to `this` StringBuf.

		The exact representation of `x` may vary per platform. To get more
		consistent behavior, this function should be called with
		Std.string(x).

		If `x` is null, the String "null" is appended.</haxe_doc>
		</add>
		<addChar public="1" set="method" line="85">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Appends the character identified by `c` to `this` StringBuf.

		If `c` is negative or has another invalid value, the result is
		unspecified.</haxe_doc>
		</addChar>
		<toString public="1" set="method" line="104">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the content of `this` StringBuf as String.

		The buffer is not emptied by this operation.</haxe_doc>
		</toString>
		<new public="1" set="method" line="29">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringBuf instance.

		This may involve initialization of the internal buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by appending small
	elements together.

	Unlike String, an instance of StringBuf is not immutable in the sense that
	it can be passed as argument to functions which modify it by appending more
	values.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="SysError" params="" file="/usr/share/haxe/std/hl/_std/Sys.hx" module="Sys">
		<msg public="1"><c path="String"/></msg>
		<toString public="1" set="method" line="32">
			<f a=""><c path="String"/></f>
			<meta><m n=":keep"/></meta>
		</toString>
		<new public="1" set="method" line="28"><f a="msg">
	<c path="String"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="hl._Bytes.Bytes_Impl_" params="" file="/usr/share/haxe/std/hl/Bytes.hx" private="1" module="hl.Bytes" final="1">
		<blit public="1" set="method" line="30" static="1">
			<f a="this:pos:src:srcPos:len">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"bytes_blit"</e>
</m></meta>
		</blit>
		<alloc set="method" line="74" static="1">
			<f a="size">
				<x path="Int"/>
				<x path="hl.Bytes"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"alloc_bytes"</e>
</m></meta>
		</alloc>
		<compare public="1" set="method" line="89" static="1">
			<f a="this:pos:bytes:bytesPos:size">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"bytes_compare"</e>
</m></meta>
		</compare>
		<compare16 public="1" set="method" line="95" static="1">
			<f a="this:bytes:size">
				<x path="hl.Bytes"/>
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"bytes_compare16"</e>
</m></meta>
		</compare16>
		<find public="1" set="method" line="101" static="1">
			<f a="this:pos:size:bytes:bytesPos:bytesSize">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"bytes_find"</e>
</m></meta>
		</find>
		<fill public="1" set="method" line="106" static="1">
			<f a="this:pos:size:v">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"bytes_fill"</e>
</m></meta>
		</fill>
		<sortI32 public="1" set="method" line="109" static="1">
			<f a="this:pos:length:f">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<f a=":">
					<x path="Int"/>
					<x path="Int"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"bsort_i32"</e>
</m></meta>
		</sortI32>
		<sortF64 public="1" set="method" line="112" static="1">
			<f a="this:pos:length:f">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<f a=":">
					<x path="Float"/>
					<x path="Float"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"bsort_f64"</e>
</m></meta>
		</sortF64>
		<sub public="1" set="method" line="156" static="1"><f a="this:pos:size">
	<x path="hl.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="hl.Bytes"/>
</f></sub>
		<ucs2Length public="1" set="method" line="163" static="1">
			<f a="this:bytePos">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"ucs2length"</e>
</m></meta>
		</ucs2Length>
		<utf8ToUtf16 public="1" set="method" line="173" static="1">
			<f a="this:bytePos:outSize">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="hl.Ref"><x path="Int"/></x>
				<x path="hl.Bytes"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"utf8_to_utf16"</e>
</m></meta>
		</utf8ToUtf16>
		<utf16ToUtf8 public="1" set="method" line="178" static="1">
			<f a="this:len:outSize">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="hl.Ref"><x path="Int"/></x>
				<x path="hl.Bytes"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"utf16_to_utf8"</e>
</m></meta>
		</utf16ToUtf8>
		<ucs2Upper set="method" line="183" static="1">
			<f a="this:bytePos:size">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="hl.Bytes"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"ucs2_upper"</e>
</m></meta>
		</ucs2Upper>
		<ucs2Lower set="method" line="188" static="1">
			<f a="this:bytePos:size">
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="hl.Bytes"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"ucs2_lower"</e>
</m></meta>
		</ucs2Lower>
		<fromValue public="1" set="method" line="203" static="1">
			<f a="v:length">
				<d/>
				<x path="hl.Ref"><x path="Int"/></x>
				<x path="hl.Bytes"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"value_to_string"</e>
</m></meta>
		</fromValue>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="Sys" params="" file="/usr/share/haxe/std/hl/_std/Sys.hx">
		<utf8Path static="1"><x path="Bool"/></utf8Path>
		<println public="1" set="method" line="61" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<haxe_doc>Prints any value to the standard output, followed by a newline.
		On Windows, this function outputs a CRLF newline.
		LF newlines are printed on all other platforms.</haxe_doc>
		</println>
		<sys_utf8_path set="method" line="160" static="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"sys_utf8_path"</e>
</m></meta>
		</sys_utf8_path>
		<sys_print set="method" line="178" static="1">
			<f a="v">
				<x path="hl.Bytes"/>
				<x path="Void"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"sys_print"</e>
</m></meta>
		</sys_print>
		<haxe_doc>This class provides access to various base functions of system platforms.
	Look in the `sys` package for more system APIs.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
			<m n=":keepInit"/>
			<m n=":access"><e>String</e></m>
		</meta>
	</class>
	<class path="Type" params="" file="/usr/share/haxe/std/hl/_std/Type.hx">
		<init set="method" line="41" static="1">
			<f a=""><x path="Void"/></f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":keep"/>
			</meta>
		</init>
		<initClass set="method" line="45" static="1">
			<f a="ct:t:name">
				<x path="hl.Type"/>
				<x path="hl.Type"/>
				<x path="hl.Bytes"/>
				<c path="hl.Class"/>
			</f>
			<meta><m n=":keep"/></meta>
		</initClass>
		<initEnum set="method" line="54" static="1">
			<f a="et:t">
				<x path="hl.Type"/>
				<x path="hl.Type"/>
				<c path="hl.Enum"/>
			</f>
			<meta><m n=":keep"/></meta>
		</initEnum>
		<register set="method" line="72" static="1">
			<f a="b:t">
				<x path="hl.Bytes"/>
				<c path="hl.BaseType"/>
				<x path="Void"/>
			</f>
			<meta><m n=":keep"/></meta>
		</register>
		<haxe_doc>The Haxe Reflection API allows retrieval of type information at runtime.

	This class complements the more lightweight Reflect class, with a focus on
	class and enum instances.

	@see https://haxe.org/manual/types.html
	@see https://haxe.org/manual/std-reflection.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="UInt" params="" file="/usr/share/haxe/std/hl/_std/UInt.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<meta>
			<m n=":coreApi"/>
			<m n=":transitive"/>
		</meta>
		<impl><class path="_UInt.UInt_Impl_" params="" file="/usr/share/haxe/std/hl/_std/UInt.hx" private="1" module="UInt" final="1"><meta>
	<m n=":keep"/>
	<m n=":coreApi"/>
</meta></class></impl>
	</abstract>
	<abstract path="haxe.CallStack" params="" file="/usr/share/haxe/std/haxe/CallStack.hx">
		<from><icast><c path="Array"><e path="haxe.StackItem"/></c></icast></from>
		<this><c path="Array"><e path="haxe.StackItem"/></c></this>
		<haxe_doc>Get information about the call stack.</haxe_doc>
		<meta>
			<m n=":allow"><e>haxe.Exception</e></m>
			<m n=":using"><e>haxe.CallStack</e></m>
		</meta>
		<impl><class path="haxe._CallStack.CallStack_Impl_" params="" file="/usr/share/haxe/std/haxe/CallStack.hx" private="1" module="haxe.CallStack" final="1"><meta>
	<m n=":keep"/>
	<m n=":using"><e>haxe.CallStack</e></m>
	<m n=":allow"><e>haxe.Exception</e></m>
</meta></class></impl>
	</abstract>
	<abstract path="haxe.Function" params="" file="/usr/share/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with any function type.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<meta><m n=":callable"/></meta>
		<impl><class path="haxe._Constraints.Function_Impl_" params="" file="/usr/share/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.FlatEnum" params="" file="/usr/share/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with an enum instance if all constructors of the enum
	require no arguments.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.FlatEnum_Impl_" params="" file="/usr/share/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.NotVoid" params="" file="/usr/share/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc>This type unifies with anything but `Void`.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.</haxe_doc>
		<impl><class path="haxe._Constraints.NotVoid_Impl_" params="" file="/usr/share/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.Constructible" params="T" file="/usr/share/haxe/std/haxe/Constraints.hx" module="haxe.Constraints">
		<this><d/></this>
		<haxe_doc><![CDATA[This type unifies with any instance of classes that have a constructor
	which

	  * is `public` and
	  * unifies with the type used for type parameter `T`.

	If a type parameter `A` is assigned to a type parameter `B` which is constrained
	to `Constructible<T>`, A must be explicitly constrained to
	`Constructible<T>` as well.

	It is intended to be used as a type parameter constraint. If used as a real
	type, the underlying type will be `Dynamic`.]]></haxe_doc>
		<impl><class path="haxe._Constraints.Constructible_Impl_" params="" file="/usr/share/haxe/std/haxe/Constraints.hx" private="1" module="haxe.Constraints" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.IMap" params="K:V" file="/usr/share/haxe/std/haxe/Constraints.hx" module="haxe.Constraints" interface="1"><meta><m n=":keep"/></meta></class>
	<class path="haxe.EnumTools" params="" file="/usr/share/haxe/std/haxe/EnumTools.hx" extern="1">
		<getName public="1" params="T" get="inline" set="null" line="52" static="1">
			<f a="e">
				<x path="Enum"><c path="getName.T"/></x>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the name of enum `e`, including its path.

		If `e` is inside a package, the package structure is returned dot-
		separated, with another dot separating the enum name:
		
			pack1.pack2.(...).packN.EnumName

		If `e` is a sub-type of a Haxe module, that module is not part of the
		package structure.

		If `e` has no package, the enum name is returned.

		If `e` is `null`, the result is unspecified.

		The enum name does not include any type parameters.</haxe_doc>
		</getName>
		<createByName public="1" params="T" get="inline" set="null" line="65" static="1">
			<f a="e:constr:?params">
				<x path="Enum"><c path="createByName.T"/></x>
				<c path="String"/>
				<c path="Array"><d/></c>
				<c path="createByName.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor `constr` with
		arguments `params`.

		If `e` or `constr` is `null`, or if enum `e` has no constructor named
		`constr`, or if the number of elements in `params` does not match the
		expected number of constructor arguments, or if any argument has an
		invalid type, the result is unspecified.</haxe_doc>
		</createByName>
		<createByIndex public="1" params="T" get="inline" set="null" line="81" static="1">
			<f a="e:index:?params">
				<x path="Enum"><c path="createByIndex.T"/></x>
				<x path="Int"/>
				<c path="Array"><d/></c>
				<c path="createByIndex.T"/>
			</f>
			<haxe_doc>Creates an instance of enum `e` by calling its constructor number
		`index` with arguments `params`.

		The constructor indices are preserved from Haxe syntax, so the first
		declared is index 0, the next index 1 etc.

		If `e` or `index` is `null`, or if enum `e` has no constructor
		corresponding to index `index`, or if the number of elements in `params`
		does not match the expected number of constructor arguments, or if any
		argument has an invalid type, the result is unspecified.</haxe_doc>
		</createByIndex>
		<createAll public="1" params="T" get="inline" set="null" line="98" static="1">
			<f a="e">
				<x path="Enum"><c path="createAll.T"/></x>
				<c path="Array"><c path="createAll.T"/></c>
			</f>
			<haxe_doc>Returns a list of all constructors of enum `e` that require no
		arguments.

		This may return the empty Array `[]` if all constructors of `e` require
		arguments.

		Otherwise an instance of `e` constructed through each of its non-
		argument constructors is returned, in the order of the constructor
		declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</createAll>
		<getConstructors public="1" params="T" get="inline" set="null" line="110" static="1">
			<f a="e">
				<x path="Enum"><c path="getConstructors.T"/></x>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Returns a list of the names of all constructors of enum `e`.

		The order of the constructor names in the returned Array is preserved
		from the original syntax.

		If `c` is `null`, the result is unspecified.</haxe_doc>
		</getConstructors>
		<haxe_doc>This class provides advanced methods on enums. It is ideally used with
	`using EnumTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `enum` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.EnumValueTools" params="" file="/usr/share/haxe/std/haxe/EnumTools.hx" module="haxe.EnumTools" extern="1">
		<equals public="1" params="T" get="inline" set="null" line="133" static="1">
			<f a="a:b">
				<c path="equals.T"/>
				<c path="equals.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Recursively compares two enum instances `a` and `b` by value.

		Unlike `a == b`, this function performs a deep equality check on the
		arguments of the constructors (if there are any).

		If `a` or `b` are `null`, the result is unspecified.</haxe_doc>
		</equals>
		<getName public="1" get="inline" set="null" line="144" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the constructor name of enum instance `e`.

		The result String does not contain any constructor arguments.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getName>
		<getParameters public="1" get="inline" set="null" line="158" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<c path="Array"><d/></c>
			</f>
			<haxe_doc>Returns a list of the constructor arguments of enum instance `e`.

		If `e` has no arguments, the result is `[]`.

		Otherwise the result are the values that were used as arguments to `e`,
		in the order of their declaration.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getParameters>
		<getIndex public="1" get="inline" set="null" line="170" static="1">
			<f a="e">
				<x path="EnumValue"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Returns the index of enum instance `e`.

		This corresponds to the original syntactic position of `e`. The index of
		the first declared constructor is 0, the next one is 1 etc.

		If `e` is `null`, the result is unspecified.</haxe_doc>
		</getIndex>
		<haxe_doc>This class provides advanced methods on enum values. It is ideally used with
	`using EnumValueTools` and then acts as an
	  [extension](https://haxe.org/manual/lf-static-extension.html) to the
	  `EnumValue` types.

	If the first argument to any of the methods is `null`, the result is
	unspecified.</haxe_doc>
	</class>
	<class path="haxe.Exception" params="" file="/usr/share/haxe/std/hl/_std/haxe/Exception.hx">
		<caught set="method" line="17" static="1"><f a="value">
	<x path="Any"/>
	<c path="haxe.Exception"/>
</f></caught>
		<thrown set="method" line="25" static="1"><f a="value">
	<x path="Any"/>
	<x path="Any"/>
</f></thrown>
		<message public="1" get="accessor" set="null">
			<c path="String"/>
			<haxe_doc>Exception message.</haxe_doc>
		</message>
		<native public="1" get="accessor" set="null">
			<x path="Any"/>
			<haxe_doc>Native exception, which caused this exception.</haxe_doc>
		</native>
		<__exceptionMessage>
			<c path="String"/>
			<meta><m n=":noCompletion"/></meta>
		</__exceptionMessage>
		<__nativeStack>
			<x path="hl.NativeArray"><x path="hl.Bytes"/></x>
			<meta><m n=":noCompletion"/></meta>
		</__nativeStack>
		<__skipStack expr="0">
			<x path="Int"/>
			<meta>
				<m n=":value"><e>0</e></m>
				<m n=":noCompletion"/>
				<m n=":ifFeature"><e>"haxe.Exception.get_stack"</e></m>
			</meta>
		</__skipStack>
		<__nativeException>
			<x path="Any"/>
			<meta><m n=":noCompletion"/></meta>
		</__nativeException>
		<__previousException>
			<x path="Null"><c path="haxe.Exception"/></x>
			<meta><m n=":noCompletion"/></meta>
		</__previousException>
		<unwrap set="method" line="47"><f a=""><x path="Any"/></f></unwrap>
		<toString public="1" set="method" line="51">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns exception message.</haxe_doc>
		</toString>
		<get_message set="method" line="65"><f a=""><c path="String"/></f></get_message>
		<get_native final="1" set="method" line="73"><f a=""><x path="Any"/></f></get_native>
		<new public="1" set="method" line="35">
			<f a="message:?previous:?native">
				<c path="String"/>
				<c path="haxe.Exception"/>
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new Exception instance.

		The `previous` argument could be used for exception chaining.

		The `native` argument is for internal usage only.
		There is no need to provide `native` argument manually and no need to keep it
		upon extending `haxe.Exception` unless you know what you're doing.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[Base class for exceptions.

	If this class (or derivatives) is used to catch an exception, then
	`haxe.CallStack.exceptionStack()` will not return a stack for the exception
	caught. Use `haxe.Exception.stack` property instead:
	```haxe
	try {
		throwSomething();
	} catch(e:Exception) {
		trace(e.stack);
	}
	```

	Custom exceptions should extend this class:
	```haxe
	class MyException extends haxe.Exception {}
	//...
	throw new MyException('terrible exception');
	```

	`haxe.Exception` is also a wildcard type to catch any exception:
	```haxe
	try {
		throw 'Catch me!';
	} catch(e:haxe.Exception) {
		trace(e.message); // Output: Catch me!
	}
	```

	To rethrow an exception just throw it again.
	Haxe will try to rethrow an original native exception whenever possible.
	```haxe
	try {
		var a:Array<Int> = null;
		a.push(1); // generates target-specific null-pointer exception
	} catch(e:haxe.Exception) {
		throw e; // rethrows native exception instead of haxe.Exception
	}
	```]]></haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<abstract path="haxe.Int32" params="" file="/usr/share/haxe/std/haxe/Int32.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="Int"/></this>
		<to>
			<icast><x path="Int"/></icast>
			<icast field="toFloat"><x path="Float"/></icast>
		</to>
		<haxe_doc>Int32 provides a 32-bit integer with consistent overflow behavior across
	all platforms.</haxe_doc>
		<meta><m n=":transitive"/></meta>
		<impl><class path="haxe._Int32.Int32_Impl_" params="" file="/usr/share/haxe/std/haxe/Int32.hx" private="1" module="haxe.Int32" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.Int64" params="" file="/usr/share/haxe/std/haxe/Int64.hx">
		<from>
			<icast><t path="haxe._Int64.__Int64"/></icast>
			<icast field="ofInt"><x path="Int"/></icast>
		</from>
		<this><t path="haxe._Int64.__Int64"/></this>
		<to><icast><t path="haxe._Int64.__Int64"/></icast></to>
		<haxe_doc>A cross-platform signed 64-bit integer.
	Int64 instances can be created from two 32-bit words using `Int64.make()`.</haxe_doc>
		<meta><m n=":transitive"/></meta>
		<impl><class path="haxe._Int64.Int64_Impl_" params="" file="/usr/share/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="haxe._Int64.__Int64" params="" file="/usr/share/haxe/std/haxe/Int64.hx" private="1" module="haxe.Int64">
		<c path="haxe._Int64.___Int64"/>
		<haxe_doc>This typedef will fool `@:coreApi` into thinking that we are using
	the same underlying type, even though it might be different on
	specific platforms.</haxe_doc>
	</typedef>
	<class path="haxe.Log" params="" file="/usr/share/haxe/std/haxe/Log.hx">
		<formatOutput public="1" set="method" line="33" static="1">
			<f a="v:infos">
				<d/>
				<t path="haxe.PosInfos"/>
				<c path="String"/>
			</f>
			<haxe_doc>Format the output of `trace` before printing it.</haxe_doc>
		</formatOutput>
		<trace public="1" set="dynamic" line="62" static="1">
			<f a="v:?infos">
				<d/>
				<t path="haxe.PosInfos"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Outputs `v` in a platform-dependent way.

		The second parameter `infos` is injected by the compiler and contains
		information about the position where the `trace()` call was made.

		This method can be rebound to a custom function:

			var oldTrace = haxe.Log.trace; // store old function
			haxe.Log.trace = function(v, ?infos) {
			  // handle trace
			}
			...
			haxe.Log.trace = oldTrace;

		If it is bound to null, subsequent calls to `trace()` will cause an
		exception.</haxe_doc>
		</trace>
		<haxe_doc>Log primarily provides the `trace()` method, which is invoked upon a call to
	`trace()` in Haxe code.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.NativeStackTrace" params="" file="/usr/share/haxe/std/hl/_std/haxe/NativeStackTrace.hx">
		<saveStack public="1" get="inline" set="null" line="14" static="1">
			<f a="exception">
				<x path="Any"/>
				<x path="Void"/>
			</f>
			<meta><m n=":ifFeature"><e>"haxe.NativeStackTrace.exceptionStack"</e></m></meta>
		</saveStack>
		<exceptionStack public="1" set="method" line="18" static="1">
			<f a=""><x path="hl.NativeArray"><x path="hl.Bytes"/></x></f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"exception_stack"</e>
</m></meta>
		</exceptionStack>
		<callStack public="1" set="method" line="23" static="1"><f a=""><x path="hl.NativeArray"><x path="hl.Bytes"/></x></f></callStack>
		<haxe_doc>Do not use manually.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":dox"><e>hide</e></m>
			<m n=":noCompletion"/>
		</meta>
	</class>
	<typedef path="haxe.PosInfos" params="" file="/usr/share/haxe/std/haxe/PosInfos.hx">
		<a>
			<methodName><c path="String"/></methodName>
			<lineNumber><x path="Int"/></lineNumber>
			<fileName><c path="String"/></fileName>
			<customParams>
				<x path="Null"><c path="Array"><d/></c></x>
				<meta><m n=":optional"/></meta>
			</customParams>
			<className><c path="String"/></className>
		</a>
		<haxe_doc>`PosInfos` is a magic type which can be used to generate position information
	into the output for debugging use.

	If a function has a final optional argument of this type, i.e.
	`(..., ?pos:haxe.PosInfos)`, each call to that function which does not assign
	a value to that argument has its position added as call argument.

	This can be used to track positions of calls in e.g. a unit testing
	framework.</haxe_doc>
	</typedef>
	<typedef path="haxe._Template.Token" params="" file="/usr/share/haxe/std/haxe/Template.hx" private="1" module="haxe.Template"><a>
	<s><x path="Bool"/></s>
	<p><c path="String"/></p>
	<l><c path="Array"><c path="String"/></c></l>
</a></typedef>
	<typedef path="haxe._Template.ExprToken" params="" file="/usr/share/haxe/std/haxe/Template.hx" private="1" module="haxe.Template"><a>
	<s><x path="Bool"/></s>
	<p><c path="String"/></p>
</a></typedef>
	<class path="haxe.iterators.ArrayIterator" params="T" file="/usr/share/haxe/std/haxe/iterators/ArrayIterator.hx">
		<array final="1"><c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c></array>
		<current expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</current>
		<hasNext public="1" set="method" line="44">
			<f a=""><x path="Bool"/></f>
			<haxe_doc>See `Iterator.hasNext`</haxe_doc>
		</hasNext>
		<next public="1" set="method" line="52">
			<f a=""><c path="haxe.iterators.ArrayIterator.T"/></f>
			<haxe_doc>See `Iterator.next`</haxe_doc>
		</next>
		<new public="1" set="method" line="36">
			<f a="array">
				<c path="Array"><c path="haxe.iterators.ArrayIterator.T"/></c>
				<x path="Void"/>
			</f>
			<haxe_doc>Create a new `ArrayIterator`.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[This iterator is used only when `Array<T>` is passed to `Iterable<T>`]]></haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.ValueException" params="" file="/usr/share/haxe/std/haxe/ValueException.hx">
		<extends path="haxe.Exception"/>
		<value public="1" set="null">
			<x path="Any"/>
			<haxe_doc>Thrown value.</haxe_doc>
		</value>
		<unwrap set="method" line="35" override="1">
			<f a=""><x path="Any"/></f>
			<haxe_doc>Extract an originally thrown value.

		This method must return the same value on subsequent calls.
		Used internally for catching non-native exceptions.
		Do _not_ override unless you know what you are doing.</haxe_doc>
		</unwrap>
		<new public="1" set="method" line="23"><f a="value:?previous:?native">
	<x path="Any"/>
	<c path="haxe.Exception"/>
	<x path="Any"/>
	<x path="Void"/>
</f></new>
		<haxe_doc>An exception containing arbitrary value.

	This class is automatically used for throwing values, which don't extend `haxe.Exception`
	or native exception type.
	For example:
	```haxe
	throw "Terrible error";
	```
	will be compiled to
	```haxe
	throw new ValueException("Terrible error");
	```</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.ds.ArraySort" params="" file="/usr/share/haxe/std/haxe/ds/ArraySort.hx">
		<sort public="1" params="T" set="method" line="42" static="1">
			<f a="a:cmp">
				<c path="Array"><c path="sort.T"/></c>
				<f a=":">
					<c path="sort.T"/>
					<c path="sort.T"/>
					<x path="Int"/>
				</f>
				<x path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sorts Array `a` according to the comparison function `cmp`, where
		`cmp(x,y)` returns 0 if `x == y`, a positive Int if `x > y` and a
		negative Int if `x < y`.

		This operation modifies Array `a` in place.

		This operation is stable: The order of equal elements is preserved.

		If `a` or `cmp` are null, the result is unspecified.]]></haxe_doc>
		</sort>
		<rec params="T" set="method" line="46" static="1"><f a="a:cmp:from:to">
	<c path="Array"><c path="rec.T"/></c>
	<f a=":">
		<c path="rec.T"/>
		<c path="rec.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></rec>
		<doMerge params="T" set="method" line="68" static="1"><f a="a:cmp:from:pivot:to:len1:len2">
	<c path="Array"><c path="doMerge.T"/></c>
	<f a=":">
		<c path="doMerge.T"/>
		<c path="doMerge.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></doMerge>
		<rotate params="T" set="method" line="94" static="1"><f a="a:cmp:from:mid:to">
	<c path="Array"><c path="rotate.T"/></c>
	<f a=":">
		<c path="rotate.T"/>
		<c path="rotate.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></rotate>
		<gcd set="method" line="115" static="1"><f a="m:n">
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></gcd>
		<upper params="T" set="method" line="124" static="1"><f a="a:cmp:from:to:val">
	<c path="Array"><c path="upper.T"/></c>
	<f a=":">
		<c path="upper.T"/>
		<c path="upper.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></upper>
		<lower params="T" set="method" line="139" static="1"><f a="a:cmp:from:to:val">
	<c path="Array"><c path="lower.T"/></c>
	<f a=":">
		<c path="lower.T"/>
		<c path="lower.T"/>
		<x path="Int"/>
	</f>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></lower>
		<swap params="T" set="method" line="153" static="1"><f a="a:i:j">
	<c path="Array"><c path="swap.T"/></c>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></swap>
		<haxe_doc>ArraySort provides a stable implementation of merge sort through its `sort`
	method. It should be used instead of `Array.sort` in cases where the order
	of equal elements has to be retained on all targets.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="haxe.ds.HashMap" params="K:V" file="/usr/share/haxe/std/haxe/ds/HashMap.hx">
		<this><c path="haxe.ds._HashMap.HashMapData">
	<c path="haxe.ds.HashMap.K"/>
	<c path="haxe.ds.HashMap.V"/>
</c></this>
		<haxe_doc>HashMap allows mapping of hashable objects to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<impl><class path="haxe.ds._HashMap.HashMap_Impl_" params="" file="/usr/share/haxe/std/haxe/ds/HashMap.hx" private="1" module="haxe.ds.HashMap" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.ds.List" params="T" file="/usr/share/haxe/std/haxe/ds/List.hx">
		<h><c path="haxe.ds._List.ListNode"><c path="haxe.ds.List.T"/></c></h>
		<q><c path="haxe.ds._List.ListNode"><c path="haxe.ds.List.T"/></c></q>
		<length public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The length of `this` List.</haxe_doc>
		</length>
		<add public="1" set="method" line="53">
			<f a="item">
				<c path="haxe.ds.List.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Adds element `item` at the end of `this` List.

		`this.length` increases by 1.</haxe_doc>
		</add>
		<remove public="1" set="method" line="137">
			<f a="v">
				<c path="haxe.ds.List.T"/>
				<x path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurrence of `v` in `this` List.

		If `v` is found by checking standard equality, it is removed from `this`
		List and the function returns true.

		Otherwise, false is returned.</haxe_doc>
		</remove>
		<new public="1" set="method" line="44">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new empty list.</haxe_doc>
		</new>
		<haxe_doc>A linked-list of elements. The list is composed of element container objects
	that are chained together. It is optimized so that adding or removing an
	element does not imply copying the whole list content every time.

	@see https://haxe.org/manual/std-List.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.ds._List.ListNode" params="T" file="/usr/share/haxe/std/haxe/ds/List.hx" private="1" module="haxe.ds.List">
		<item public="1"><c path="haxe.ds._List.ListNode.T"/></item>
		<next public="1"><c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListNode.T"/></c></next>
		<new public="1" set="method" line="266"><f a="item:next">
	<c path="haxe.ds._List.ListNode.T"/>
	<c path="haxe.ds._List.ListNode"><c path="haxe.ds._List.ListNode.T"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="haxe.ds.Map" params="K:V" file="/usr/share/haxe/std/haxe/ds/Map.hx">
		<from>
			<icast field="fromStringMap"><c path="haxe.ds.StringMap"><c path="fromStringMap.V"/></c></icast>
			<icast field="fromIntMap"><c path="haxe.ds.IntMap"><c path="fromIntMap.V"/></c></icast>
			<icast field="fromObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="fromObjectMap.K"/>
	<c path="fromObjectMap.V"/>
</c></icast>
		</from>
		<this><c path="haxe.IMap">
	<c path="haxe.ds.Map.K"/>
	<c path="haxe.ds.Map.V"/>
</c></this>
		<to>
			<icast field="toStringMap"><c path="haxe.ds.StringMap"><c path="toStringMap.V"/></c></icast>
			<icast field="toIntMap"><c path="haxe.ds.IntMap"><c path="toIntMap.V"/></c></icast>
			<icast field="toEnumValueMapMap"><c path="haxe.ds.EnumValueMap">
	<c path="toEnumValueMapMap.K"/>
	<c path="toEnumValueMapMap.V"/>
</c></icast>
			<icast field="toObjectMap"><c path="haxe.ds.ObjectMap">
	<c path="toObjectMap.K"/>
	<c path="toObjectMap.V"/>
</c></icast>
		</to>
		<haxe_doc><![CDATA[Map allows key to value mapping for arbitrary value types, and many key
	types.

	This is a multi-type abstract, it is instantiated as one of its
	specialization types depending on its type parameters.

	A Map can be instantiated without explicit type parameters. Type inference
	will then determine the type parameters from the usage.

	Maps can also be created with `[key1 => value1, key2 => value2]` syntax.

	Map is an abstract type, it is not available at runtime.

	@see https://haxe.org/manual/std-Map.html]]></haxe_doc>
		<meta>
			<m n=":transitive"/>
			<m n=":multiType"><e>@:followWithAbstracts K</e></m>
		</meta>
		<impl><class path="haxe.ds._Map.Map_Impl_" params="" file="/usr/share/haxe/std/haxe/ds/Map.hx" private="1" module="haxe.ds.Map" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="haxe.ds.ReadOnlyArray" params="T" file="/usr/share/haxe/std/haxe/ds/ReadOnlyArray.hx">
		<from><icast><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></icast></from>
		<this><c path="Array"><c path="haxe.ds.ReadOnlyArray.T"/></c></this>
		<to><icast><t path="Iterable"><c path="haxe.ds.ReadOnlyArray.T"/></t></icast></to>
		<haxe_doc>`ReadOnlyArray` is an abstract over an ordinary `Array` which only exposes
	APIs that don't modify the instance, hence "read-only".

	Note that this doesn't necessarily mean that the instance is *immutable*.
	Other code holding a reference to the underlying `Array` can still modify it,
	and the reference can be obtained with a `cast`.</haxe_doc>
		<meta><m n=":forward">
	<e>copy</e>
	<e>filter</e>
	<e>indexOf</e>
	<e>iterator</e>
	<e>keyValueIterator</e>
	<e>join</e>
	<e>lastIndexOf</e>
	<e>map</e>
	<e>slice</e>
	<e>contains</e>
	<e>toString</e>
</m></meta>
		<impl><class path="haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_" params="" file="/usr/share/haxe/std/haxe/ds/ReadOnlyArray.hx" private="1" module="haxe.ds.ReadOnlyArray" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="haxe.ds.StringMap" params="T" file="/usr/share/haxe/std/hl/_std/haxe/ds/StringMap.hx">
		<implements path="haxe.IMap">
			<c path="String"/>
			<c path="haxe.ds.StringMap.T"/>
		</implements>
		<h><x path="hl.types.BytesMap"/></h>
		<set public="1" set="method" line="54">
			<f a="key:value">
				<c path="String"/>
				<c path="haxe.ds.StringMap.T"/>
				<x path="Void"/>
			</f>
			<haxe_doc>See `Map.set`</haxe_doc>
		</set>
		<get public="1" set="method" line="58">
			<f a="key">
				<c path="String"/>
				<x path="Null"><c path="haxe.ds.StringMap.T"/></x>
			</f>
			<haxe_doc>See `Map.get`</haxe_doc>
		</get>
		<toString public="1" set="method" line="95">
			<f a=""><c path="String"/></f>
			<haxe_doc>See `Map.toString`</haxe_doc>
		</toString>
		<new public="1" set="method" line="50">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new StringMap.</haxe_doc>
		</new>
		<haxe_doc>StringMap allows mapping of String keys to arbitrary values.

	See `Map` for documentation details.

	@see https://haxe.org/manual/std-Map.html</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<typedef path="haxe.ds._Vector.VectorData" params="T" file="/usr/share/haxe/std/hl/_std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector"><c path="Array"><c path="haxe.ds._Vector.VectorData.T"/></c></typedef>
	<abstract path="haxe.ds.Vector" params="T" file="/usr/share/haxe/std/hl/_std/haxe/ds/Vector.hx">
		<this><t path="haxe.ds._Vector.VectorData"><c path="haxe.ds.Vector.T"/></t></this>
		<meta><m n=":coreApi"/></meta>
		<impl><class path="haxe.ds._Vector.Vector_Impl_" params="" file="/usr/share/haxe/std/hl/_std/haxe/ds/Vector.hx" private="1" module="haxe.ds.Vector" final="1"><meta>
	<m n=":keep"/>
	<m n=":coreApi"/>
</meta></class></impl>
	</abstract>
	<class path="haxe.exceptions.PosException" params="" file="/usr/share/haxe/std/haxe/exceptions/PosException.hx">
		<extends path="haxe.Exception"/>
		<posInfos final="1" public="1">
			<t path="haxe.PosInfos"/>
			<haxe_doc>Position where this exception was created.</haxe_doc>
		</posInfos>
		<toString public="1" set="method" line="24" override="1">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns exception message.</haxe_doc>
		</toString>
		<new public="1" set="method" line="12"><f a="message:?previous:?pos">
	<c path="String"/>
	<c path="haxe.Exception"/>
	<x path="Null"><t path="haxe.PosInfos"/></x>
	<x path="Void"/>
</f></new>
		<haxe_doc>An exception that carry position information of a place where it was created.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.exceptions.NotImplementedException" params="" file="/usr/share/haxe/std/haxe/exceptions/NotImplementedException.hx">
		<extends path="haxe.exceptions.PosException"/>
		<new public="1" set="method" line="7">
			<f a="?message:?previous:?pos" v="&quot;Not implemented&quot;::">
				<c path="String"/>
				<c path="haxe.Exception"/>
				<x path="Null"><t path="haxe.PosInfos"/></x>
				<x path="Void"/>
			</f>
			<meta><m n=":value"><e>{ message : "Not implemented" }</e></m></meta>
		</new>
		<haxe_doc>An exception that is thrown when requested function or operation does not have an implementation.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="haxe.io.Bytes" params="" file="/usr/share/haxe/std/hl/_std/haxe/io/Bytes.hx">
		<ofString public="1" set="method" line="216" static="1">
			<f a="s:?encoding">
				<c path="String"/>
				<e path="haxe.io.Encoding"/>
				<c path="haxe.io.Bytes"/>
			</f>
			<haxe_doc>Returns the `Bytes` representation of the given `String`, using the
		specified encoding (UTF-8 by default).</haxe_doc>
		</ofString>
		<length public="1" set="null"><x path="Int"/></length>
		<b><x path="hl.Bytes"/></b>
		<getString public="1" set="method" line="171">
			<f a="pos:len:?encoding">
				<x path="Int"/>
				<x path="Int"/>
				<e path="haxe.io.Encoding"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the `len`-bytes long string stored at the given position `pos`,
		interpreted with the given `encoding` (UTF-8 by default).</haxe_doc>
		</getString>
		<toString public="1" set="method" line="188">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a `String` representation of the bytes interpreted as UTF-8.</haxe_doc>
		</toString>
		<new set="method" line="31"><f a="b:length">
	<x path="hl.Bytes"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.io.BytesBuffer" params="" file="/usr/share/haxe/std/hl/_std/haxe/io/BytesBuffer.hx">
		<b><x path="hl.Bytes"/></b>
		<pos><x path="Int"/></pos>
		<size><x path="Int"/></size>
		<__expand set="method" line="49"><f a="req">
	<x path="Int"/>
	<x path="Void"/>
</f></__expand>
		<getBytes public="1" set="method" line="128">
			<f a=""><c path="haxe.io.Bytes"/></f>
			<haxe_doc>Returns either a copy or a reference of the current bytes.
		Once called, the buffer should no longer be used.</haxe_doc>
		</getBytes>
		<new public="1" set="method" line="33"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="haxe.io.BytesDataImpl" params="" file="/usr/share/haxe/std/haxe/io/BytesData.hx" module="haxe.io.BytesData">
		<bytes public="1"><x path="hl.Bytes"/></bytes>
		<length public="1"><x path="Int"/></length>
		<new public="1" set="method" line="44"><f a="b:length">
	<x path="hl.Bytes"/>
	<x path="Int"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="haxe.io.BytesDataAbstract" params="" file="/usr/share/haxe/std/haxe/io/BytesData.hx" module="haxe.io.BytesData">
		<this><c path="haxe.io.BytesDataImpl"/></this>
		<to><icast field="toBytes"><x path="hl.Bytes"/></icast></to>
		<meta><m n=":forward">
	<e>bytes</e>
	<e>length</e>
</m></meta>
		<impl><class path="haxe.io._BytesData.BytesDataAbstract_Impl_" params="" file="/usr/share/haxe/std/haxe/io/BytesData.hx" private="1" module="haxe.io.BytesData" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="haxe.io.BytesData" params="" file="/usr/share/haxe/std/haxe/io/BytesData.hx"><x path="haxe.io.BytesDataAbstract"/></typedef>
	<enum path="haxe.io.Encoding" params="" file="/usr/share/haxe/std/haxe/io/Encoding.hx">
		<UTF8/>
		<RawNative><haxe_doc>Output the string the way the platform represent it in memory. This is the most efficient but is platform-specific</haxe_doc></RawNative>
		<haxe_doc>String binary encoding supported by Haxe I/O</haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="haxe.io.Eof" params="" file="/usr/share/haxe/std/haxe/io/Eof.hx">
		<toString set="method" line="32">
			<f a=""><c path="String"/></f>
			<meta><m n=":ifFeature"><e>"haxe.io.Eof.*"</e></m></meta>
		</toString>
		<new public="1" set="method" line="29"><f a=""><x path="Void"/></f></new>
		<haxe_doc>This exception is raised when reading while data is no longer available in the `haxe.io.Input`.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<enum path="haxe.io.Error" params="" file="/usr/share/haxe/std/haxe/io/Error.hx">
		<Blocked><haxe_doc>The IO is set into nonblocking mode and some data cannot be read or written</haxe_doc></Blocked>
		<Overflow><haxe_doc>An integer value is outside its allowed range</haxe_doc></Overflow>
		<OutsideBounds><haxe_doc>An operation on Bytes is outside of its valid range</haxe_doc></OutsideBounds>
		<Custom a="e">
			<d/>
			<haxe_doc>Other errors</haxe_doc>
		</Custom>
		<haxe_doc>The possible IO errors that can occur</haxe_doc>
		<meta><m n=":directlyUsed"/></meta>
	</enum>
	<class path="haxe.io.Input" params="" file="/usr/share/haxe/std/haxe/io/Input.hx">
		<readByte public="1" set="method" line="49">
			<f a=""><x path="Int"/></f>
			<haxe_doc>Read and return one byte.</haxe_doc>
		</readByte>
		<readLine public="1" set="method" line="176">
			<f a=""><c path="String"/></f>
			<haxe_doc>Read a line of text separated by CR and/or LF bytes.

		The CR/LF characters are not included in the resulting string.</haxe_doc>
		</readLine>
		<haxe_doc>An Input is an abstract reader. See other classes in the `haxe.io` package
	for several possible implementations.

	All functions which read data throw `Eof` when the end of the stream
	is reached.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.io.Output" params="" file="/usr/share/haxe/std/haxe/io/Output.hx">
		<writeByte public="1" set="method" line="46">
			<f a="c">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write one byte.</haxe_doc>
		</writeByte>
		<writeBytes public="1" set="method" line="57">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<haxe_doc>Write `len` bytes from `s` starting by position specified by `pos`.

		Returns the actual length of written data that can differ from `len`.

		See `writeFullBytes` that tries to write the exact amount of specified bytes.</haxe_doc>
		</writeBytes>
		<writeFullBytes public="1" set="method" line="120">
			<f a="s:pos:len">
				<c path="haxe.io.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `len` bytes from `s` starting by position specified by `pos`.

		Unlike `writeBytes`, this method tries to write the exact `len` amount of bytes.</haxe_doc>
		</writeFullBytes>
		<writeString public="1" set="method" line="278">
			<f a="s:?encoding">
				<c path="String"/>
				<e path="haxe.io.Encoding"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write `s` string.</haxe_doc>
		</writeString>
		<haxe_doc>An Output is an abstract write. A specific output implementation will only
	have to override the `writeByte` and maybe the `write`, `flush` and `close`
	methods. See `File.write` and `String.write` for two ways of creating an
	Output.</haxe_doc>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="haxe.iterators.ArrayKeyValueIterator" params="T" file="/usr/share/haxe/std/haxe/iterators/ArrayKeyValueIterator.hx">
		<current expr="0">
			<x path="Int"/>
			<meta><m n=":value"><e>0</e></m></meta>
		</current>
		<array><c path="Array"><c path="haxe.iterators.ArrayKeyValueIterator.T"/></c></array>
		<hasNext public="1" set="method" line="36"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method" line="41"><f a=""><a>
	<value><c path="haxe.iterators.ArrayKeyValueIterator.T"/></value>
	<key><x path="Int"/></key>
</a></f></next>
		<new public="1" set="method" line="31"><f a="array">
	<c path="Array"><c path="haxe.iterators.ArrayKeyValueIterator.T"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":ifFeature">
				<e>"anon_read.keyValueIterator"</e>
				<e>"dynamic_read.keyValueIterator"</e>
			</m>
		</meta>
	</class>
	<typedef path="haxe.macro.Position" params="" file="/usr/share/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<min>
				<x path="Int"/>
				<haxe_doc>Position of the first character.</haxe_doc>
			</min>
			<max>
				<x path="Int"/>
				<haxe_doc>Position of the last character.</haxe_doc>
			</max>
			<file>
				<c path="String"/>
				<haxe_doc>Reference to the filename.</haxe_doc>
			</file>
		</a>
		<haxe_doc>Represents a position in a file.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Expr" params="" file="/usr/share/haxe/std/haxe/macro/Expr.hx">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the expression.</haxe_doc>
			</pos>
			<expr>
				<e path="haxe.macro.ExprDef"/>
				<haxe_doc>The expression kind.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a node in the AST.
	@see https://haxe.org/manual/macro-reification-expression.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ExprOf" params="T" file="/usr/share/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<t path="haxe.macro.Expr"/>
		<haxe_doc>Represents a AST node identical to `Expr`, but it allows constraining the
	type of accepted expressions.
	@see https://haxe.org/manual/macro-ExprOf.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Case" params="" file="/usr/share/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<values>
				<c path="Array"><t path="haxe.macro.Expr"/></c>
				<haxe_doc>The value expressions of the case.</haxe_doc>
			</values>
			<guard>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional guard expressions of the case, if available.</haxe_doc>
			</guard>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The expression of the case, if available.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a switch case.
	@see https://haxe.org/manual/expression-switch.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Var" params="" file="/usr/share/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<type>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The type-hint of the variable, if available.</haxe_doc>
			</type>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the variable.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Metadata associatied with the variable, if available.</haxe_doc>
			</meta>
			<isFinal>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the variable can be assigned to.</haxe_doc>
			</isFinal>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The expression of the variable, if available.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a variable in the AST.
	@see https://haxe.org/manual/expression-var.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Catch" params="" file="/usr/share/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<type>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The type of the catch.</haxe_doc>
			</type>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the catch variable.</haxe_doc>
			</name>
			<expr>
				<t path="haxe.macro.Expr"/>
				<haxe_doc>The expression of the catch.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents a catch in the AST.
	@see https://haxe.org/manual/expression-try-catch.html</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ObjectField" params="" file="/usr/share/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<quotes>
				<x path="Null"><e path="haxe.macro.QuoteStatus"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>How the field name is quoted.</haxe_doc>
			</quotes>
			<field>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</field>
			<expr>
				<t path="haxe.macro.Expr"/>
				<haxe_doc>The field expression.</haxe_doc>
			</expr>
		</a>
		<haxe_doc>Represents the field of an object declaration.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypePath" params="" file="/usr/share/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<sub>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Sub is set on module sub-type access:
		`pack.Module.Type` has `name = "Module"`, `sub = "Type"`, if available.</haxe_doc>
			</sub>
			<params>
				<x path="Null"><c path="Array"><e path="haxe.macro.TypeParam"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Optional parameters of the type path.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>Represents the package of the type path.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type path.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents a type path in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypeParamDecl" params="" file="/usr/share/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional parameters of the type parameter.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type parameter.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The metadata of the type parameter.</haxe_doc>
			</meta>
			<constraints>
				<x path="Null"><c path="Array"><e path="haxe.macro.ComplexType"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional constraints of the type parameter.</haxe_doc>
			</constraints>
		</a>
		<haxe_doc>Represents a type parameter declaration in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Function" params="" file="/usr/share/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<ret>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The return type-hint of the function, if available.</haxe_doc>
			</ret>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>An optional list of function parameter type declarations.</haxe_doc>
			</params>
			<expr>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The expression of the function body, if available.</haxe_doc>
			</expr>
			<args>
				<c path="Array"><t path="haxe.macro.FunctionArg"/></c>
				<haxe_doc>A list of function arguments.</haxe_doc>
			</args>
		</a>
		<haxe_doc>Represents a function in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.FunctionArg" params="" file="/usr/share/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<value>
				<x path="Null"><t path="haxe.macro.Expr"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional value of the function argument, if available.</haxe_doc>
			</value>
			<type>
				<x path="Null"><e path="haxe.macro.ComplexType"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The type-hint of the function argument, if available.</haxe_doc>
			</type>
			<opt>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the function argument is optional.</haxe_doc>
			</opt>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the function argument.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The metadata of the function argument.</haxe_doc>
			</meta>
		</a>
		<haxe_doc>Represents a function argument in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.MetadataEntry" params="" file="/usr/share/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the metadata entry.</haxe_doc>
			</pos>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.Expr"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional parameters of the metadata entry.</haxe_doc>
			</params>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the metadata entry.</haxe_doc>
			</name>
		</a>
		<haxe_doc>Represents a metadata entry in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Metadata" params="" file="/usr/share/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<c path="Array"><t path="haxe.macro.MetadataEntry"/></c>
		<haxe_doc>Represents metadata in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.Field" params="" file="/usr/share/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position of the field.</haxe_doc>
			</pos>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the field.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional metadata of the field.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.FieldType"/>
				<haxe_doc>The kind of the field.</haxe_doc>
			</kind>
			<doc>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The documentation of the field, if available. If the field has no
		documentation, the value is `null`.</haxe_doc>
			</doc>
			<access>
				<x path="Null"><c path="Array"><e path="haxe.macro.Access"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The access modifiers of the field. By default fields have private access.
		@see https://haxe.org/manual/class-field-access-modifier.html</haxe_doc>
			</access>
		</a>
		<haxe_doc>Represents a field in the AST.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.TypeDefinition" params="" file="/usr/share/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<pos>
				<t path="haxe.macro.Position"/>
				<haxe_doc>The position to the type definition.</haxe_doc>
			</pos>
			<params>
				<x path="Null"><c path="Array"><t path="haxe.macro.TypeParamDecl"/></c></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The parameter type declarations of the type definition.</haxe_doc>
			</params>
			<pack>
				<c path="Array"><c path="String"/></c>
				<haxe_doc>The package of the type definition.</haxe_doc>
			</pack>
			<name>
				<c path="String"/>
				<haxe_doc>The name of the type definition.</haxe_doc>
			</name>
			<meta>
				<x path="Null"><t path="haxe.macro.Metadata"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The optional metadata of the type definition.</haxe_doc>
			</meta>
			<kind>
				<e path="haxe.macro.TypeDefKind"/>
				<haxe_doc>The kind of the type definition.</haxe_doc>
			</kind>
			<isExtern>
				<x path="Null"><x path="Bool"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>Whether or not the type is extern.</haxe_doc>
			</isExtern>
			<fields>
				<c path="Array"><t path="haxe.macro.Field"/></c>
				<haxe_doc>The fields of the type definition.</haxe_doc>
			</fields>
			<doc>
				<x path="Null"><c path="String"/></x>
				<meta><m n=":optional"/></meta>
				<haxe_doc>The documentation of the type, if available. If the type has no
		documentation, the value is `null`.</haxe_doc>
			</doc>
		</a>
		<haxe_doc>Represents a type definition.</haxe_doc>
	</typedef>
	<typedef path="haxe.macro.ImportExpr" params="" file="/usr/share/haxe/std/haxe/macro/Expr.hx" module="haxe.macro.Expr">
		<a>
			<path>
				<c path="Array"><a>
	<pos><t path="haxe.macro.Position"/></pos>
	<name><c path="String"/></name>
</a></c>
				<haxe_doc>The path to the import expression.</haxe_doc>
			</path>
			<mode>
				<e path="haxe.macro.ImportMode"/>
				<haxe_doc>The mode of the import expression.</haxe_doc>
			</mode>
		</a>
		<haxe_doc>Represents the import expression.</haxe_doc>
	</typedef>
	<class path="hl.Abstract" params="Const" file="/usr/share/haxe/std/hl/Abstract.hx" extern="1"/>
	<class path="hl.Api" params="" file="/usr/share/haxe/std/hl/Api.hx" extern="1">
		<rethrow public="1" get="inline" set="null" line="26" static="1">
			<f a="v">
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</rethrow>
		<getField public="1" set="method" static="1">
			<f a="obj:hash">
				<d/>
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"obj_get_field"</e>
</m></meta>
		</getField>
		<setField public="1" set="method" static="1">
			<f a="obj:hash:value">
				<d/>
				<x path="Int"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"obj_set_field"</e>
</m></meta>
		</setField>
		<hasField public="1" set="method" static="1">
			<f a="obj:hash">
				<d/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"obj_has_field"</e>
</m></meta>
		</hasField>
		<deleteField public="1" set="method" static="1">
			<f a="obj:hash">
				<d/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"obj_delete_field"</e>
</m></meta>
		</deleteField>
		<callMethod public="1" set="method" static="1">
			<f a="f:args">
				<x path="haxe.Function"/>
				<x path="hl.NativeArray"><d/></x>
				<d/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"call_method"</e>
</m></meta>
		</callMethod>
		<getClosureValue public="1" set="method" static="1">
			<f a="f">
				<x path="haxe.Function"/>
				<d/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"get_closure_value"</e>
</m></meta>
		</getClosureValue>
		<makeClosure public="1" set="method" static="1">
			<f a="f:v">
				<x path="haxe.Function"/>
				<d/>
				<d/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"make_closure"</e>
</m></meta>
		</makeClosure>
		<noClosure public="1" set="method" static="1">
			<f a="f">
				<x path="haxe.Function"/>
				<x path="haxe.Function"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"no_closure"</e>
</m></meta>
		</noClosure>
		<safeCast public="1" set="method" static="1">
			<f a="v:t">
				<d/>
				<x path="hl.Type"/>
				<d/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"value_cast"</e>
</m></meta>
		</safeCast>
		<makeVarArgs public="1" set="method" static="1">
			<f a="v">
				<f a="">
					<x path="hl.NativeArray"><d/></x>
					<d/>
				</f>
				<x path="haxe.Function"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"make_var_args"</e>
</m></meta>
		</makeVarArgs>
		<getVirtualValue public="1" set="method" static="1">
			<f a="v">
				<d/>
				<d/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"get_virtual_value"</e>
</m></meta>
		</getVirtualValue>
		<setErrorHandler public="1" set="method" static="1">
			<f a="v">
				<f a="">
					<d/>
					<x path="Void"/>
				</f>
				<x path="Void"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"set_error_handler"</e>
</m></meta>
		</setErrorHandler>
		<breakPoint public="1" set="method" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"breakpoint"</e>
</m></meta>
		</breakPoint>
		<is64 public="1" set="method" static="1">
			<f a=""><x path="Bool"/></f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"sys_is64"</e>
</m></meta>
		</is64>
		<comparePointer public="1" set="method" static="1">
			<f a="a:b">
				<d/>
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"ptr_compare"</e>
</m></meta>
		</comparePointer>
		<meta><m n=":directlyUsed"/></meta>
	</class>
	<class path="hl.BaseType" params="" file="/usr/share/haxe/std/hl/BaseType.hx">
		<__type__ public="1"><x path="hl.Type"/></__type__>
		<__meta__ public="1"><d/></__meta__>
		<__implementedBy__ public="1"><x path="hl.NativeArray"><x path="hl.Type"/></x></__implementedBy__>
		<check public="1" set="method" line="31"><f a="v">
	<d/>
	<x path="Bool"/>
</f></check>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="hl.Class" params="" file="/usr/share/haxe/std/hl/BaseType.hx" module="hl.BaseType">
		<extends path="hl.BaseType"/>
		<__name__ public="1"><c path="String"/></__name__>
		<__constructor__ public="1"><d/></__constructor__>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="hl.Enum" params="" file="/usr/share/haxe/std/hl/BaseType.hx" module="hl.BaseType">
		<extends path="hl.BaseType"/>
		<__ename__ public="1"><c path="String"/></__ename__>
		<__emap__ public="1"><x path="hl.types.BytesMap"/></__emap__>
		<__constructs__ public="1"><c path="Array"><c path="String"/></c></__constructs__>
		<__evalues__ public="1"><x path="hl.NativeArray"><d/></x></__evalues__>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="hl.CoreType" params="" file="/usr/share/haxe/std/hl/BaseType.hx" module="hl.BaseType">
		<extends path="hl.Class"/>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="hl.CoreEnum" params="" file="/usr/share/haxe/std/hl/BaseType.hx" module="hl.BaseType">
		<extends path="hl.Enum"/>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="hl.Boot" params="" file="/usr/share/haxe/std/hl/Boot.hx" extern="1"><meta><m n=":dox"><e>hide</e></m></meta></class>
	<abstract path="hl.Bytes" params="" file="/usr/share/haxe/std/hl/Bytes.hx">
		<from><icast field="fromBytes"><c path="haxe.io.Bytes"/></icast></from>
		<this><x path="hl.Bytes"/></this>
		<meta><m n=":coreType"/></meta>
		<impl><class path="hl._Bytes.Bytes_Impl_" params="" file="/usr/share/haxe/std/hl/Bytes.hx" private="1" module="hl.Bytes" final="1">
	<blit public="1" set="method" line="30" static="1">
		<f a="this:pos:src:srcPos:len">
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"bytes_blit"</e>
</m></meta>
	</blit>
	<alloc set="method" line="74" static="1">
		<f a="size">
			<x path="Int"/>
			<x path="hl.Bytes"/>
		</f>
		<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"alloc_bytes"</e>
</m></meta>
	</alloc>
	<compare public="1" set="method" line="89" static="1">
		<f a="this:pos:bytes:bytesPos:size">
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"bytes_compare"</e>
</m></meta>
	</compare>
	<compare16 public="1" set="method" line="95" static="1">
		<f a="this:bytes:size">
			<x path="hl.Bytes"/>
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"bytes_compare16"</e>
</m></meta>
	</compare16>
	<find public="1" set="method" line="101" static="1">
		<f a="this:pos:size:bytes:bytesPos:bytesSize">
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"bytes_find"</e>
</m></meta>
	</find>
	<fill public="1" set="method" line="106" static="1">
		<f a="this:pos:size:v">
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"bytes_fill"</e>
</m></meta>
	</fill>
	<sortI32 public="1" set="method" line="109" static="1">
		<f a="this:pos:length:f">
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<f a=":">
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"bsort_i32"</e>
</m></meta>
	</sortI32>
	<sortF64 public="1" set="method" line="112" static="1">
		<f a="this:pos:length:f">
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<f a=":">
				<x path="Float"/>
				<x path="Float"/>
				<x path="Int"/>
			</f>
			<x path="Void"/>
		</f>
		<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"bsort_f64"</e>
</m></meta>
	</sortF64>
	<sub public="1" set="method" line="156" static="1"><f a="this:pos:size">
	<x path="hl.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="hl.Bytes"/>
</f></sub>
	<ucs2Length public="1" set="method" line="163" static="1">
		<f a="this:bytePos">
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
		</f>
		<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"ucs2length"</e>
</m></meta>
	</ucs2Length>
	<utf8ToUtf16 public="1" set="method" line="173" static="1">
		<f a="this:bytePos:outSize">
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="hl.Ref"><x path="Int"/></x>
			<x path="hl.Bytes"/>
		</f>
		<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"utf8_to_utf16"</e>
</m></meta>
	</utf8ToUtf16>
	<utf16ToUtf8 public="1" set="method" line="178" static="1">
		<f a="this:len:outSize">
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="hl.Ref"><x path="Int"/></x>
			<x path="hl.Bytes"/>
		</f>
		<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"utf16_to_utf8"</e>
</m></meta>
	</utf16ToUtf8>
	<ucs2Upper set="method" line="183" static="1">
		<f a="this:bytePos:size">
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="hl.Bytes"/>
		</f>
		<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"ucs2_upper"</e>
</m></meta>
	</ucs2Upper>
	<ucs2Lower set="method" line="188" static="1">
		<f a="this:bytePos:size">
			<x path="hl.Bytes"/>
			<x path="Int"/>
			<x path="Int"/>
			<x path="hl.Bytes"/>
		</f>
		<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"ucs2_lower"</e>
</m></meta>
	</ucs2Lower>
	<fromValue public="1" set="method" line="203" static="1">
		<f a="v:length">
			<d/>
			<x path="hl.Ref"><x path="Int"/></x>
			<x path="hl.Bytes"/>
		</f>
		<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"value_to_string"</e>
</m></meta>
	</fromValue>
	<meta>
		<m n=":keep"/>
		<m n=":directlyUsed"/>
	</meta>
</class></impl>
	</abstract>
	<abstract path="hl.BytesAccess" params="T" file="/usr/share/haxe/std/hl/BytesAccess.hx">
		<from><icast><x path="hl.Bytes"/></icast></from>
		<this><x path="hl.BytesAccess"><c path="hl.BytesAccess.T"/></x></this>
		<to><icast><x path="hl.Bytes"/></icast></to>
		<meta><m n=":coreType"/></meta>
		<impl><class path="hl._BytesAccess.BytesAccess_Impl_" params="" file="/usr/share/haxe/std/hl/BytesAccess.hx" private="1" module="hl.BytesAccess" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="hl.F32" params="" file="/usr/share/haxe/std/hl/F32.hx"><x path="Single"/></typedef>
	<abstract path="hl.NativeArray" params="T" file="/usr/share/haxe/std/hl/NativeArray.hx">
		<this><x path="hl.NativeArray"><c path="hl.NativeArray.T"/></x></this>
		<to><icast field="getRef"><x path="hl.Ref"><c path="hl.NativeArray.T"/></x></icast></to>
		<meta><m n=":coreType"/></meta>
		<impl><class path="hl._NativeArray.NativeArray_Impl_" params="" file="/usr/share/haxe/std/hl/NativeArray.hx" private="1" module="hl.NativeArray" final="1">
	<getType public="1" set="method" line="93" static="1">
		<f a="this">
			<x path="hl.NativeArray"><c path="hl.NativeArray.T"/></x>
			<x path="hl.Type"/>
		</f>
		<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"array_type"</e>
</m></meta>
	</getType>
	<blit public="1" set="method" line="97" static="1">
		<f a="this:pos:src:srcPos:srcLen">
			<x path="hl.NativeArray"><c path="hl.NativeArray.T"/></x>
			<x path="Int"/>
			<x path="hl.NativeArray"><c path="hl.NativeArray.T"/></x>
			<x path="Int"/>
			<x path="Int"/>
			<x path="Void"/>
		</f>
		<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"array_blit"</e>
</m></meta>
	</blit>
	<meta>
		<m n=":keep"/>
		<m n=":directlyUsed"/>
	</meta>
</class></impl>
	</abstract>
	<class path="hl._NativeArray.NativeArray_Impl_" params="" file="/usr/share/haxe/std/hl/NativeArray.hx" private="1" module="hl.NativeArray" final="1">
		<getType public="1" set="method" line="93" static="1">
			<f a="this">
				<x path="hl.NativeArray"><c path="hl.NativeArray.T"/></x>
				<x path="hl.Type"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"array_type"</e>
</m></meta>
		</getType>
		<blit public="1" set="method" line="97" static="1">
			<f a="this:pos:src:srcPos:srcLen">
				<x path="hl.NativeArray"><c path="hl.NativeArray.T"/></x>
				<x path="Int"/>
				<x path="hl.NativeArray"><c path="hl.NativeArray.T"/></x>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"array_blit"</e>
</m></meta>
		</blit>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="hl.Ref" params="T" file="/usr/share/haxe/std/hl/Ref.hx">
		<from><icast field="make"><c path="make.T"/></icast></from>
		<this><x path="hl.Ref"><c path="hl.Ref.T"/></x></this>
		<meta>
			<m n=":semantics"><e>reference</e></m>
			<m n=":coreType"/>
		</meta>
		<impl><class path="hl._Ref.Ref_Impl_" params="" file="/usr/share/haxe/std/hl/Ref.hx" private="1" module="hl.Ref" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<abstract path="hl.TypeKind" params="" file="/usr/share/haxe/std/hl/Type.hx" module="hl.Type">
		<this><x path="Int"/></this>
		<meta><m n=":enum"/></meta>
		<impl><class path="hl._Type.TypeKind_Impl_" params="" file="/usr/share/haxe/std/hl/Type.hx" private="1" module="hl.Type" final="1"><meta>
	<m n=":keep"/>
	<m n=":enum"/>
</meta></class></impl>
	</abstract>
	<abstract path="hl.Type" params="" file="/usr/share/haxe/std/hl/Type.hx">
		<this><x path="hl.Type"/></this>
		<meta><m n=":coreType"/></meta>
		<impl><class path="hl._Type.Type_Impl_" params="" file="/usr/share/haxe/std/hl/Type.hx" private="1" module="hl.Type" final="1">
	<getNameBytes set="method" line="55" static="1">
		<f a="this">
			<x path="hl.Type"/>
			<x path="hl.Bytes"/>
		</f>
		<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"type_name"</e>
</m></meta>
	</getNameBytes>
	<safeCast public="1" set="method" line="78" static="1">
		<f a="this:t">
			<x path="hl.Type"/>
			<x path="hl.Type"/>
			<x path="Bool"/>
		</f>
		<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"type_safe_cast"</e>
</m></meta>
	</safeCast>
	<setGlobal public="1" set="method" line="90" static="1">
		<f a="this:v">
			<x path="hl.Type"/>
			<d/>
			<x path="Bool"/>
		</f>
		<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"type_set_global"</e>
</m></meta>
	</setGlobal>
	<getEnumFields public="1" set="method" line="102" static="1">
		<f a="this">
			<x path="hl.Type"/>
			<x path="hl.NativeArray"><x path="hl.Bytes"/></x>
		</f>
		<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"type_enum_fields"</e>
</m></meta>
	</getEnumFields>
	<getEnumValues public="1" set="method" line="106" static="1">
		<f a="this">
			<x path="hl.Type"/>
			<x path="hl.NativeArray"><d/></x>
		</f>
		<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"type_enum_values"</e>
</m></meta>
	</getEnumValues>
	<allocObject public="1" set="method" line="110" static="1">
		<f a="this">
			<x path="hl.Type"/>
			<d/>
		</f>
		<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"alloc_obj"</e>
</m></meta>
	</allocObject>
	<meta>
		<m n=":keep"/>
		<m n=":directlyUsed"/>
	</meta>
</class></impl>
	</abstract>
	<class path="hl._Type.Type_Impl_" params="" file="/usr/share/haxe/std/hl/Type.hx" private="1" module="hl.Type" final="1">
		<getNameBytes set="method" line="55" static="1">
			<f a="this">
				<x path="hl.Type"/>
				<x path="hl.Bytes"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"type_name"</e>
</m></meta>
		</getNameBytes>
		<safeCast public="1" set="method" line="78" static="1">
			<f a="this:t">
				<x path="hl.Type"/>
				<x path="hl.Type"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"type_safe_cast"</e>
</m></meta>
		</safeCast>
		<setGlobal public="1" set="method" line="90" static="1">
			<f a="this:v">
				<x path="hl.Type"/>
				<d/>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"type_set_global"</e>
</m></meta>
		</setGlobal>
		<getEnumFields public="1" set="method" line="102" static="1">
			<f a="this">
				<x path="hl.Type"/>
				<x path="hl.NativeArray"><x path="hl.Bytes"/></x>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"type_enum_fields"</e>
</m></meta>
		</getEnumFields>
		<getEnumValues public="1" set="method" line="106" static="1">
			<f a="this">
				<x path="hl.Type"/>
				<x path="hl.NativeArray"><d/></x>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"type_enum_values"</e>
</m></meta>
		</getEnumValues>
		<allocObject public="1" set="method" line="110" static="1">
			<f a="this">
				<x path="hl.Type"/>
				<d/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"alloc_obj"</e>
</m></meta>
		</allocObject>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<abstract path="hl.UI16" params="" file="/usr/share/haxe/std/hl/UI16.hx">
		<from><icast><x path="Int"/></icast></from>
		<this><x path="hl.UI16"/></this>
		<to><icast><x path="Int"/></icast></to>
		<meta>
			<m n=":coreType"/>
			<m n=":notNull"/>
			<m n=":runtimeValue"/>
		</meta>
	</abstract>
	<class path="hl.types.ArrayAccess" params="" file="/usr/share/haxe/std/hl/types/ArrayBase.hx" module="hl.types.ArrayBase">
		<getDyn public="1" set="method" line="27"><f a="pos">
	<x path="Int"/>
	<d/>
</f></getDyn>
		<setDyn public="1" set="method" line="32"><f a="pos:v">
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></setDyn>
		<blit public="1" set="method" line="36"><f a="pos:src:srcpos:len">
	<x path="Int"/>
	<c path="hl.types.ArrayAccess"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blit>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="hl.types.ArrayBase" params="" file="/usr/share/haxe/std/hl/types/ArrayBase.hx">
		<extends path="hl.types.ArrayAccess"/>
		<allocI32 public="1" set="method" line="120" static="1">
			<f a="bytes:length">
				<x path="hl.BytesAccess"><x path="Int"/></x>
				<x path="Int"/>
				<t path="hl.types.ArrayI32"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</allocI32>
		<allocUI16 public="1" set="method" line="128" static="1">
			<f a="bytes:length">
				<x path="hl.BytesAccess"><x path="hl.UI16"/></x>
				<x path="Int"/>
				<t path="hl.types.ArrayUI16"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</allocUI16>
		<allocF32 public="1" set="method" line="136" static="1">
			<f a="bytes:length">
				<x path="hl.BytesAccess"><t path="hl.F32"/></x>
				<x path="Int"/>
				<t path="hl.types.ArrayF32"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</allocF32>
		<allocF64 public="1" set="method" line="144" static="1">
			<f a="bytes:length">
				<x path="hl.BytesAccess"><x path="Float"/></x>
				<x path="Int"/>
				<t path="hl.types.ArrayF64"/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</allocF64>
		<length public="1" set="null"><x path="Int"/></length>
		<pushDyn public="1" set="method" line="45"><f a="v">
	<d/>
	<x path="Int"/>
</f></pushDyn>
		<popDyn public="1" set="method" line="50"><f a=""><x path="Null"><d/></x></f></popDyn>
		<shiftDyn public="1" set="method" line="55"><f a=""><x path="Null"><d/></x></f></shiftDyn>
		<unshiftDyn public="1" set="method" line="60"><f a="v">
	<d/>
	<x path="Void"/>
</f></unshiftDyn>
		<insertDyn public="1" set="method" line="64"><f a="pos:v">
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></insertDyn>
		<containsDyn public="1" set="method" line="68"><f a="v">
	<d/>
	<x path="Bool"/>
</f></containsDyn>
		<removeDyn public="1" set="method" line="73"><f a="v">
	<d/>
	<x path="Bool"/>
</f></removeDyn>
		<sortDyn public="1" set="method" line="78"><f a="f">
	<f a=":">
		<d/>
		<d/>
		<x path="Int"/>
	</f>
	<x path="Void"/>
</f></sortDyn>
		<slice public="1" set="method" line="82"><f a="pos:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="hl.types.ArrayBase"/>
</f></slice>
		<splice public="1" set="method" line="87"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="hl.types.ArrayBase"/>
</f></splice>
		<join public="1" set="method" line="92"><f a="sep">
	<c path="String"/>
	<c path="String"/>
</f></join>
		<reverse public="1" set="method" line="97"><f a=""><x path="Void"/></f></reverse>
		<resize public="1" set="method" line="101"><f a="len">
	<x path="Int"/>
	<x path="Void"/>
</f></resize>
		<toString public="1" set="method" line="105"><f a=""><c path="String"/></f></toString>
		<__cast set="method" line="110"><f a="t">
	<x path="hl.Type"/>
	<d/>
</f></__cast>
		<isArrayObj set="method" line="116"><f a=""><x path="Bool"/></f></isArrayObj>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="hl.types.BytesIterator" params="T" file="/usr/share/haxe/std/hl/types/ArrayBytes.hx" module="hl.types.ArrayBytes">
		<extends path="haxe.iterators.ArrayIterator"><c path="hl.types.BytesIterator.T"/></extends>
		<a><c path="hl.types.ArrayBytes"><c path="hl.types.BytesIterator.T"/></c></a>
		<hasNext public="1" set="method" line="38" override="1"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method" line="42" override="1"><f a=""><c path="hl.types.BytesIterator.T"/></f></next>
		<new public="1" set="method" line="33"><f a="a">
	<c path="hl.types.ArrayBytes"><c path="hl.types.BytesIterator.T"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":generic"/>
		</meta>
	</class>
	<class path="hl.types.BytesKeyValueIterator" params="T" file="/usr/share/haxe/std/hl/types/ArrayBytes.hx" module="hl.types.ArrayBytes">
		<extends path="haxe.iterators.ArrayKeyValueIterator"><c path="hl.types.BytesKeyValueIterator.T"/></extends>
		<a><c path="hl.types.ArrayBytes"><c path="hl.types.BytesKeyValueIterator.T"/></c></a>
		<hasNext public="1" set="method" line="57" override="1"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method" line="61" override="1"><f a=""><a>
	<value><c path="hl.types.BytesKeyValueIterator.T"/></value>
	<key><x path="Int"/></key>
</a></f></next>
		<new public="1" set="method" line="52"><f a="a">
	<c path="hl.types.ArrayBytes"><c path="hl.types.BytesKeyValueIterator.T"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
			<m n=":generic"/>
		</meta>
	</class>
	<class path="hl.types.ArrayBytes" params="T" file="/usr/share/haxe/std/hl/types/ArrayBytes.hx">
		<extends path="hl.types.ArrayBase"/>
		<bytes><x path="hl.BytesAccess"><c path="hl.types.ArrayBytes.T"/></x></bytes>
		<size><x path="Int"/></size>
		<concat public="1" set="method" line="77"><f a="a">
	<c path="hl.types.ArrayBytes"><c path="hl.types.ArrayBytes.T"/></c>
	<c path="hl.types.ArrayBytes"><c path="hl.types.ArrayBytes.T"/></c>
</f></concat>
		<join public="1" set="method" line="87" override="1"><f a="sep">
	<c path="String"/>
	<c path="String"/>
</f></join>
		<pop public="1" set="method" line="97"><f a=""><x path="Null"><c path="hl.types.ArrayBytes.T"/></x></f></pop>
		<push public="1" set="method" line="104"><f a="x">
	<c path="hl.types.ArrayBytes.T"/>
	<x path="Int"/>
</f></push>
		<reverse public="1" set="method" line="114" override="1"><f a=""><x path="Void"/></f></reverse>
		<shift public="1" set="method" line="123"><f a=""><x path="Null"><c path="hl.types.ArrayBytes.T"/></x></f></shift>
		<blit public="1" set="method" line="132" override="1"><f a="pos:src:srcpos:len">
	<x path="Int"/>
	<c path="hl.types.ArrayAccess"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blit>
		<slice public="1" set="method" line="139" override="1"><f a="pos:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="hl.types.ArrayBytes"><c path="hl.types.ArrayBytes.T"/></c>
</f></slice>
		<sort public="1" set="method" line="164"><f a="f">
	<f a=":">
		<c path="hl.types.ArrayBytes.T"/>
		<c path="hl.types.ArrayBytes.T"/>
		<x path="Int"/>
	</f>
	<x path="Void"/>
</f></sort>
		<splice public="1" set="method" line="171" override="1"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="hl.types.ArrayBytes"><c path="hl.types.ArrayBytes.T"/></c>
</f></splice>
		<toString public="1" set="method" line="198" override="1"><f a=""><c path="String"/></f></toString>
		<unshift public="1" set="method" line="210"><f a="x">
	<c path="hl.types.ArrayBytes.T"/>
	<x path="Void"/>
</f></unshift>
		<insert public="1" set="method" line="219"><f a="pos:x">
	<x path="Int"/>
	<c path="hl.types.ArrayBytes.T"/>
	<x path="Void"/>
</f></insert>
		<contains public="1" set="method" line="234"><f a="x">
	<c path="hl.types.ArrayBytes.T"/>
	<x path="Bool"/>
</f></contains>
		<remove public="1" set="method" line="238"><f a="x">
	<c path="hl.types.ArrayBytes.T"/>
	<x path="Bool"/>
</f></remove>
		<indexOf public="1" set="method" line="247"><f a="x:?fromIndex">
	<c path="hl.types.ArrayBytes.T"/>
	<x path="Int"/>
	<x path="Int"/>
</f></indexOf>
		<lastIndexOf public="1" set="method" line="260"><f a="x:?fromIndex">
	<c path="hl.types.ArrayBytes.T"/>
	<x path="Int"/>
	<x path="Int"/>
</f></lastIndexOf>
		<copy public="1" set="method" line="275"><f a=""><c path="hl.types.ArrayBytes"><c path="hl.types.ArrayBytes.T"/></c></f></copy>
		<iterator public="1" set="method" line="283"><f a=""><c path="haxe.iterators.ArrayIterator"><c path="hl.types.ArrayBytes.T"/></c></f></iterator>
		<keyValueIterator public="1" set="method" line="287"><f a=""><c path="haxe.iterators.ArrayKeyValueIterator"><c path="hl.types.ArrayBytes.T"/></c></f></keyValueIterator>
		<map public="1" params="S" set="method" line="291"><f a="f">
	<f a="">
		<c path="hl.types.ArrayBytes.T"/>
		<c path="map.S"/>
	</f>
	<c path="hl.types.ArrayDyn"/>
</f></map>
		<filter public="1" set="method" line="300"><f a="f">
	<f a="">
		<c path="hl.types.ArrayBytes.T"/>
		<x path="Bool"/>
	</f>
	<c path="hl.types.ArrayBytes"><c path="hl.types.ArrayBytes.T"/></c>
</f></filter>
		<resize public="1" set="method" line="310" override="1"><f a="len">
	<x path="Int"/>
	<x path="Void"/>
</f></resize>
		<getDyn public="1" set="method" line="319" override="1"><f a="pos">
	<x path="Int"/>
	<d/>
</f></getDyn>
		<setDyn public="1" set="method" line="326" override="1"><f a="pos:v">
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></setDyn>
		<pushDyn public="1" set="method" line="334" override="1"><f a="v">
	<d/>
	<x path="Int"/>
</f></pushDyn>
		<popDyn public="1" set="method" line="337" override="1"><f a=""><x path="Null"><d/></x></f></popDyn>
		<shiftDyn public="1" set="method" line="340" override="1"><f a=""><x path="Null"><d/></x></f></shiftDyn>
		<unshiftDyn public="1" set="method" line="343" override="1"><f a="v">
	<d/>
	<x path="Void"/>
</f></unshiftDyn>
		<insertDyn public="1" set="method" line="346" override="1"><f a="pos:v">
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></insertDyn>
		<containsDyn public="1" set="method" line="349" override="1"><f a="v">
	<d/>
	<x path="Bool"/>
</f></containsDyn>
		<removeDyn public="1" set="method" line="352" override="1"><f a="v">
	<d/>
	<x path="Bool"/>
</f></removeDyn>
		<sortDyn public="1" set="method" line="355" override="1"><f a="f">
	<f a=":">
		<d/>
		<d/>
		<x path="Int"/>
	</f>
	<x path="Void"/>
</f></sortDyn>
		<__expand set="method" line="358"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></__expand>
		<new public="1" set="method" line="72"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":keep"/>
			<m n=":generic"/>
		</meta>
	</class>
	<typedef path="hl.types.ArrayI32" params="" file="/usr/share/haxe/std/hl/types/ArrayBytes.hx" module="hl.types.ArrayBytes"><c path="hl.types.ArrayBytes_Int"/></typedef>
	<typedef path="hl.types.ArrayUI16" params="" file="/usr/share/haxe/std/hl/types/ArrayBytes.hx" module="hl.types.ArrayBytes"><c path="hl.types.ArrayBytes_hl_UI16"/></typedef>
	<typedef path="hl.types.ArrayF32" params="" file="/usr/share/haxe/std/hl/types/ArrayBytes.hx" module="hl.types.ArrayBytes"><c path="hl.types.ArrayBytes_hl_F32"/></typedef>
	<typedef path="hl.types.ArrayF64" params="" file="/usr/share/haxe/std/hl/types/ArrayBytes.hx" module="hl.types.ArrayBytes"><c path="hl.types.ArrayBytes_Float"/></typedef>
	<class path="hl.types.ArrayDynIterator" params="" file="/usr/share/haxe/std/hl/types/ArrayDyn.hx" module="hl.types.ArrayDyn">
		<extends path="haxe.iterators.ArrayIterator"><d/></extends>
		<a><c path="hl.types.ArrayBase"/></a>
		<hasNext public="1" set="method" line="37" override="1"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method" line="41" override="1"><f a=""><unknown/></f></next>
		<new public="1" set="method" line="32"><f a="a">
	<c path="hl.types.ArrayBase"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="hl.types.ArrayDynKeyValueIterator" params="" file="/usr/share/haxe/std/hl/types/ArrayDyn.hx" module="hl.types.ArrayDyn">
		<extends path="haxe.iterators.ArrayKeyValueIterator"><d/></extends>
		<a><c path="hl.types.ArrayBase"/></a>
		<hasNext public="1" set="method" line="54" override="1"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method" line="58" override="1"><f a=""><a>
	<value><unknown/></value>
	<key><x path="Int"/></key>
</a></f></next>
		<new public="1" set="method" line="49"><f a="a">
	<c path="hl.types.ArrayBase"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="hl.types.ArrayDyn" params="" file="/usr/share/haxe/std/hl/types/ArrayDyn.hx">
		<extends path="hl.types.ArrayAccess"/>
		<alloc public="1" set="method" line="256" static="1">
			<f a="a:?allowReinterpret" v=":false">
				<c path="hl.types.ArrayBase"/>
				<x path="Bool"/>
				<c path="hl.types.ArrayDyn"/>
			</f>
			<meta>
				<m n=":has_untyped"/>
				<m n=":value"><e>{ allowReinterpret : false }</e></m>
			</meta>
		</alloc>
		<length public="1" get="accessor" set="null"><x path="Int"/></length>
		<array><c path="hl.types.ArrayBase"/></array>
		<allowReinterpret><x path="Bool"/></allowReinterpret>
		<get_length get="inline" set="null" line="77"><f a=""><x path="Int"/></f></get_length>
		<getDyn public="1" set="method" line="79" override="1"><f a="i">
	<x path="Int"/>
	<unknown/>
</f></getDyn>
		<setDyn public="1" set="method" line="83" override="1"><f a="pos:value">
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></setDyn>
		<blit public="1" set="method" line="87" override="1"><f a="pos:src:srcpos:len">
	<x path="Int"/>
	<c path="hl.types.ArrayAccess"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blit>
		<concat public="1" set="method" line="91"><f a="a">
	<c path="hl.types.ArrayDyn"/>
	<c path="hl.types.ArrayDyn"/>
</f></concat>
		<join public="1" set="method" line="103"><f a="sep">
	<c path="String"/>
	<c path="String"/>
</f></join>
		<pop public="1" set="method" line="107"><f a=""><x path="Null"><d/></x></f></pop>
		<push public="1" set="method" line="111"><f a="x">
	<d/>
	<x path="Int"/>
</f></push>
		<reverse public="1" set="method" line="115"><f a=""><x path="Void"/></f></reverse>
		<resize public="1" set="method" line="119"><f a="len">
	<x path="Int"/>
	<x path="Void"/>
</f></resize>
		<shift public="1" set="method" line="123"><f a=""><x path="Null"><d/></x></f></shift>
		<slice public="1" set="method" line="127"><f a="pos:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="hl.types.ArrayDyn"/>
</f></slice>
		<sort public="1" set="method" line="131"><f a="f">
	<f a=":">
		<d/>
		<d/>
		<x path="Int"/>
	</f>
	<x path="Void"/>
</f></sort>
		<splice public="1" set="method" line="135"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="hl.types.ArrayDyn"/>
</f></splice>
		<toString public="1" set="method" line="139"><f a=""><c path="String"/></f></toString>
		<unshift public="1" set="method" line="143"><f a="x">
	<d/>
	<x path="Void"/>
</f></unshift>
		<insert public="1" set="method" line="147"><f a="pos:x">
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></insert>
		<contains public="1" set="method" line="151"><f a="x">
	<d/>
	<x path="Bool"/>
</f></contains>
		<remove public="1" set="method" line="155"><f a="x">
	<d/>
	<x path="Bool"/>
</f></remove>
		<indexOf public="1" set="method" line="159"><f a="x:?fromIndex">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
</f></indexOf>
		<lastIndexOf public="1" set="method" line="171"><f a="x:?fromIndex">
	<d/>
	<x path="Int"/>
	<x path="Int"/>
</f></lastIndexOf>
		<copy public="1" set="method" line="186"><f a=""><c path="hl.types.ArrayDyn"/></f></copy>
		<iterator public="1" set="method" line="193"><f a=""><c path="haxe.iterators.ArrayIterator"><d/></c></f></iterator>
		<keyValueIterator public="1" set="method" line="197"><f a=""><c path="haxe.iterators.ArrayKeyValueIterator"><d/></c></f></keyValueIterator>
		<map public="1" set="method" line="201"><f a="f">
	<f a="">
		<d/>
		<d/>
	</f>
	<c path="hl.types.ArrayDyn"/>
</f></map>
		<filter public="1" set="method" line="208"><f a="f">
	<f a="">
		<d/>
		<x path="Bool"/>
	</f>
	<c path="hl.types.ArrayDyn"/>
</f></filter>
		<__get_field set="method" line="218">
			<f a="fid">
				<x path="Int"/>
				<d/>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</__get_field>
		<__cast set="method" line="224"><f a="t">
	<x path="hl.Type"/>
	<d/>
</f></__cast>
		<__compare set="method" line="252">
			<f a="a">
				<d/>
				<x path="Int"/>
			</f>
			<meta><m n=":keep"/></meta>
		</__compare>
		<new public="1" set="method" line="71"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
		</meta>
	</class>
	<class path="hl.types.ArrayObjIterator" params="T" file="/usr/share/haxe/std/hl/types/ArrayObj.hx" module="hl.types.ArrayObj">
		<extends path="haxe.iterators.ArrayIterator"><c path="hl.types.ArrayObjIterator.T"/></extends>
		<arr><c path="hl.types.ArrayObj"><c path="hl.types.ArrayObjIterator.T"/></c></arr>
		<hasNext public="1" set="method" line="36" override="1"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method" line="40" override="1"><f a=""><c path="hl.types.ArrayObjIterator.T"/></f></next>
		<new public="1" get="inline" set="null" line="31"><f a="arr">
	<c path="hl.types.ArrayObj"><c path="hl.types.ArrayObjIterator.T"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="hl.types.ArrayObjKeyValueIterator" params="T" file="/usr/share/haxe/std/hl/types/ArrayObj.hx" module="hl.types.ArrayObj">
		<extends path="haxe.iterators.ArrayKeyValueIterator"><c path="hl.types.ArrayObjKeyValueIterator.T"/></extends>
		<arr><c path="hl.types.ArrayObj"><c path="hl.types.ArrayObjKeyValueIterator.T"/></c></arr>
		<hasNext public="1" set="method" line="53" override="1"><f a=""><x path="Bool"/></f></hasNext>
		<next public="1" set="method" line="57" override="1"><f a=""><a>
	<value><c path="hl.types.ArrayObjKeyValueIterator.T"/></value>
	<key><x path="Int"/></key>
</a></f></next>
		<new public="1" get="inline" set="null" line="48"><f a="arr">
	<c path="hl.types.ArrayObj"><c path="hl.types.ArrayObjKeyValueIterator.T"/></c>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="hl.types.ArrayObj" params="T" file="/usr/share/haxe/std/hl/types/ArrayObj.hx">
		<extends path="hl.types.ArrayBase"/>
		<alloc public="1" params="T" set="method" line="382" static="1">
			<f a="a">
				<x path="hl.NativeArray"><c path="alloc.T"/></x>
				<c path="hl.types.ArrayObj"><c path="alloc.T"/></c>
			</f>
			<meta><m n=":has_untyped"/></meta>
		</alloc>
		<array><x path="hl.NativeArray"><d/></x></array>
		<concat public="1" set="method" line="72"><f a="a">
	<c path="hl.types.ArrayObj"><c path="hl.types.ArrayObj.T"/></c>
	<c path="hl.types.ArrayObj"><c path="hl.types.ArrayObj.T"/></c>
</f></concat>
		<join public="1" set="method" line="79" override="1"><f a="sep">
	<c path="String"/>
	<c path="String"/>
</f></join>
		<isArrayObj set="method" line="89" override="1"><f a=""><x path="Bool"/></f></isArrayObj>
		<pop public="1" set="method" line="93"><f a=""><x path="Null"><c path="hl.types.ArrayObj.T"/></x></f></pop>
		<push public="1" set="method" line="102"><f a="x">
	<c path="hl.types.ArrayObj.T"/>
	<x path="Int"/>
</f></push>
		<reverse public="1" set="method" line="112" override="1"><f a=""><x path="Void"/></f></reverse>
		<shift public="1" set="method" line="121"><f a=""><x path="Null"><c path="hl.types.ArrayObj.T"/></x></f></shift>
		<slice public="1" set="method" line="131" override="1"><f a="pos:?end">
	<x path="Int"/>
	<x path="Int"/>
	<c path="hl.types.ArrayObj"><c path="hl.types.ArrayObj.T"/></c>
</f></slice>
		<sort public="1" set="method" line="153"><f a="f">
	<f a=":">
		<c path="hl.types.ArrayObj.T"/>
		<c path="hl.types.ArrayObj.T"/>
		<x path="Int"/>
	</f>
	<x path="Void"/>
</f></sort>
		<splice public="1" set="method" line="158" override="1"><f a="pos:len">
	<x path="Int"/>
	<x path="Int"/>
	<c path="hl.types.ArrayObj"><c path="hl.types.ArrayObj.T"/></c>
</f></splice>
		<toString public="1" set="method" line="185" override="1">
			<f a=""><c path="String"/></f>
			<meta><m n=":access"><e>Std.toStringDepth</e></m></meta>
		</toString>
		<unshift public="1" set="method" line="206"><f a="x">
	<c path="hl.types.ArrayObj.T"/>
	<x path="Void"/>
</f></unshift>
		<insert public="1" set="method" line="215"><f a="pos:x">
	<x path="Int"/>
	<c path="hl.types.ArrayObj.T"/>
	<x path="Void"/>
</f></insert>
		<contains public="1" set="method" line="230"><f a="x">
	<c path="hl.types.ArrayObj.T"/>
	<x path="Bool"/>
</f></contains>
		<remove public="1" set="method" line="234"><f a="x">
	<c path="hl.types.ArrayObj.T"/>
	<x path="Bool"/>
</f></remove>
		<indexOf public="1" set="method" line="244"><f a="x:?fromIndex">
	<c path="hl.types.ArrayObj.T"/>
	<x path="Int"/>
	<x path="Int"/>
</f></indexOf>
		<blit public="1" set="method" line="261" override="1"><f a="pos:src:srcpos:len">
	<x path="Int"/>
	<c path="hl.types.ArrayAccess"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Void"/>
</f></blit>
		<lastIndexOf public="1" set="method" line="268"><f a="x:?fromIndex">
	<c path="hl.types.ArrayObj.T"/>
	<x path="Int"/>
	<x path="Int"/>
</f></lastIndexOf>
		<copy public="1" set="method" line="283"><f a=""><c path="hl.types.ArrayObj"><c path="hl.types.ArrayObj.T"/></c></f></copy>
		<iterator public="1" set="method" line="289"><f a=""><c path="haxe.iterators.ArrayIterator"><c path="hl.types.ArrayObj.T"/></c></f></iterator>
		<keyValueIterator public="1" set="method" line="293"><f a=""><c path="haxe.iterators.ArrayKeyValueIterator"><c path="hl.types.ArrayObj.T"/></c></f></keyValueIterator>
		<map public="1" params="S" set="method" line="297"><f a="f">
	<f a="">
		<c path="hl.types.ArrayObj.T"/>
		<c path="map.S"/>
	</f>
	<c path="hl.types.ArrayDyn"/>
</f></map>
		<filter public="1" set="method" line="306"><f a="f">
	<f a="">
		<c path="hl.types.ArrayObj.T"/>
		<x path="Bool"/>
	</f>
	<c path="hl.types.ArrayObj"><c path="hl.types.ArrayObj.T"/></c>
</f></filter>
		<resize public="1" set="method" line="316" override="1"><f a="len">
	<x path="Int"/>
	<x path="Void"/>
</f></resize>
		<__expand set="method" line="328"><f a="index">
	<x path="Int"/>
	<x path="Void"/>
</f></__expand>
		<getDyn public="1" set="method" line="344" override="1"><f a="pos">
	<x path="Int"/>
	<d/>
</f></getDyn>
		<setDyn public="1" set="method" line="351" override="1"><f a="pos:v">
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></setDyn>
		<pushDyn public="1" set="method" line="359" override="1"><f a="v">
	<d/>
	<x path="Int"/>
</f></pushDyn>
		<popDyn public="1" set="method" line="362" override="1"><f a=""><x path="Null"><d/></x></f></popDyn>
		<shiftDyn public="1" set="method" line="365" override="1"><f a=""><x path="Null"><d/></x></f></shiftDyn>
		<unshiftDyn public="1" set="method" line="368" override="1"><f a="v">
	<d/>
	<x path="Void"/>
</f></unshiftDyn>
		<insertDyn public="1" set="method" line="371" override="1"><f a="pos:v">
	<x path="Int"/>
	<d/>
	<x path="Void"/>
</f></insertDyn>
		<containsDyn public="1" set="method" line="374" override="1"><f a="v">
	<d/>
	<x path="Bool"/>
</f></containsDyn>
		<removeDyn public="1" set="method" line="377" override="1"><f a="v">
	<d/>
	<x path="Bool"/>
</f></removeDyn>
		<sortDyn public="1" set="method" line="380" override="1"><f a="f">
	<f a=":">
		<d/>
		<d/>
		<x path="Int"/>
	</f>
	<x path="Void"/>
</f></sortDyn>
		<new public="1" set="method" line="67"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":keep"/>
		</meta>
	</class>
	<typedef path="hl.types.BytesMapData" params="" file="/usr/share/haxe/std/hl/types/BytesMap.hx" module="hl.types.BytesMap"><c path="hl.Abstract"><c path="Shl_bytes_map"/></c></typedef>
	<abstract path="hl.types.BytesMap" params="" file="/usr/share/haxe/std/hl/types/BytesMap.hx">
		<this><t path="hl.types.BytesMapData"/></this>
		<impl><class path="hl.types._BytesMap.BytesMap_Impl_" params="" file="/usr/share/haxe/std/hl/types/BytesMap.hx" private="1" module="hl.types.BytesMap" final="1">
	<alloc set="method" line="32" static="1">
		<f a=""><t path="hl.types.BytesMapData"/></f>
		<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"hballoc"</e>
</m></meta>
	</alloc>
	<set public="1" set="method" line="37" static="1">
		<f a="this:key:value">
			<t path="hl.types.BytesMapData"/>
			<x path="hl.Bytes"/>
			<d/>
			<x path="Void"/>
		</f>
		<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"hbset"</e>
</m></meta>
	</set>
	<get public="1" set="method" line="45" static="1">
		<f a="this:key">
			<t path="hl.types.BytesMapData"/>
			<x path="hl.Bytes"/>
			<d/>
		</f>
		<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"hbget"</e>
</m></meta>
	</get>
	<keysArray public="1" set="method" line="55" static="1">
		<f a="this">
			<t path="hl.types.BytesMapData"/>
			<x path="hl.NativeArray"><x path="hl.Bytes"/></x>
		</f>
		<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"hbkeys"</e>
</m></meta>
	</keysArray>
	<valuesArray public="1" set="method" line="60" static="1">
		<f a="this">
			<t path="hl.types.BytesMapData"/>
			<x path="hl.NativeArray"><d/></x>
		</f>
		<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"hbvalues"</e>
</m></meta>
	</valuesArray>
	<meta>
		<m n=":keep"/>
		<m n=":directlyUsed"/>
	</meta>
</class></impl>
	</abstract>
	<class path="hl.types._BytesMap.BytesMap_Impl_" params="" file="/usr/share/haxe/std/hl/types/BytesMap.hx" private="1" module="hl.types.BytesMap" final="1">
		<alloc set="method" line="32" static="1">
			<f a=""><t path="hl.types.BytesMapData"/></f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"hballoc"</e>
</m></meta>
		</alloc>
		<set public="1" set="method" line="37" static="1">
			<f a="this:key:value">
				<t path="hl.types.BytesMapData"/>
				<x path="hl.Bytes"/>
				<d/>
				<x path="Void"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"hbset"</e>
</m></meta>
		</set>
		<get public="1" set="method" line="45" static="1">
			<f a="this:key">
				<t path="hl.types.BytesMapData"/>
				<x path="hl.Bytes"/>
				<d/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"hbget"</e>
</m></meta>
		</get>
		<keysArray public="1" set="method" line="55" static="1">
			<f a="this">
				<t path="hl.types.BytesMapData"/>
				<x path="hl.NativeArray"><x path="hl.Bytes"/></x>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"hbkeys"</e>
</m></meta>
		</keysArray>
		<valuesArray public="1" set="method" line="60" static="1">
			<f a="this">
				<t path="hl.types.BytesMapData"/>
				<x path="hl.NativeArray"><d/></x>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"hbvalues"</e>
</m></meta>
		</valuesArray>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<typedef path="hl.types.IntMapData" params="" file="/usr/share/haxe/std/hl/types/IntMap.hx" module="hl.types.IntMap"><c path="hl.Abstract"><c path="Shl_int_map"/></c></typedef>
	<abstract path="hl.types.IntMap" params="" file="/usr/share/haxe/std/hl/types/IntMap.hx">
		<this><t path="hl.types.IntMapData"/></this>
		<impl><class path="hl.types._IntMap.IntMap_Impl_" params="" file="/usr/share/haxe/std/hl/types/IntMap.hx" private="1" module="hl.types.IntMap" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<typedef path="hl.types.ObjectMapData" params="" file="/usr/share/haxe/std/hl/types/ObjectMap.hx" module="hl.types.ObjectMap"><c path="hl.Abstract"><c path="Shl_obj_map"/></c></typedef>
	<abstract path="hl.types.ObjectMap" params="" file="/usr/share/haxe/std/hl/types/ObjectMap.hx">
		<this><t path="hl.types.ObjectMapData"/></this>
		<impl><class path="hl.types._ObjectMap.ObjectMap_Impl_" params="" file="/usr/share/haxe/std/hl/types/ObjectMap.hx" private="1" module="hl.types.ObjectMap" final="1"><meta><m n=":keep"/></meta></class></impl>
	</abstract>
	<class path="lib.bases.AbstractPage" params="" file="lib/bases/BasePage.hx" module="lib.bases.BasePage" abstract="1">
		<GenerateMode public="1" expr="LiveGeneration">
			<e path="lib.bases.GenerateMode"/>
			<meta><m n=":value"><e>LiveGeneration</e></m></meta>
		</GenerateMode>
		<WriteToDisk abstract="1" public="1" set="method"><f a=""><x path="Void"/></f></WriteToDisk>
		<new public="1" set="method" line="15"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="lib.bases.BasePage" params="" file="lib/bases/BasePage.hx">
		<extends path="lib.bases.AbstractPage"/>
		<WriteToDisk public="1" set="method" line="41" override="1">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Filename and path is based of FilePath</haxe_doc>
		</WriteToDisk>
		<new public="1" set="method" line="29"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="lib.bases.IAPI" params="" file="lib/bases/BasePage.hx" module="lib.bases.BasePage" interface="1"><meta><m n=":keep"/></meta></class>
	<class path="lib.bases.ApiPage" params="" file="lib/bases/BasePage.hx" module="lib.bases.BasePage">
		<extends path="lib.bases.BasePage"/>
		<implements path="lib.bases.IAPI"/>
		<APIPath public="1"><t path="Map">
	<c path="String"/>
	<c path="String"/>
</t></APIPath>
		<GatherData public="1" set="method" line="82"><f a=""><x path="Void"/></f></GatherData>
		<new public="1" set="method" line="58"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<enum path="lib.bases.GenerateMode" params="" file="lib/bases/BasePage.hx" module="lib.bases.BasePage">
		<LiveOnlyStaticFile/>
		<LiveGeneration/>
		<GenerateSingleton/>
		<GenerateMultiton/>
		<haxe_doc><![CDATA[LiveOnlyStaticFile => Link to a static file
  LiveGeneration => Generate Page dynamically (like in PHP)
  Generate Singleton => Create the site on the initial start of the Server && serve this file en route. /index.html e.x.
  Generate Multiton => Generate a whole table, one page per row and serve them in a subfolder. /blog/blog-entry.html e.x.]]></haxe_doc>
		<meta>
			<m n=":directlyUsed"/>
			<m n=":flatEnum"/>
		</meta>
	</enum>
	<class path="pages.IndexPage" params="" file="pages/IndexPage.hx">
		<extends path="lib.bases.ApiPage"/>
		<new public="1" set="method" line="10"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<typedef path="sys.FileStat" params="" file="/usr/share/haxe/std/sys/FileStat.hx">
		<a>
			<uid>
				<x path="Int"/>
				<haxe_doc>The user id for the file owner.</haxe_doc>
			</uid>
			<size>
				<x path="Int"/>
				<haxe_doc>The size of the file, in bytes.</haxe_doc>
			</size>
			<rdev>
				<x path="Int"/>
				<haxe_doc>The device type on which stat resides (special files only).</haxe_doc>
			</rdev>
			<nlink>
				<x path="Int"/>
				<haxe_doc>The number of hard links to stat.</haxe_doc>
			</nlink>
			<mtime>
				<c path="Date"/>
				<haxe_doc>The last modification time for the file.</haxe_doc>
			</mtime>
			<mode>
				<x path="Int"/>
				<haxe_doc>The permission bits of stat. The meaning of the bits is platform dependent.</haxe_doc>
			</mode>
			<ino>
				<x path="Int"/>
				<haxe_doc>The inode number for stat.</haxe_doc>
			</ino>
			<gid>
				<x path="Int"/>
				<haxe_doc>The user group id for the file owner.</haxe_doc>
			</gid>
			<dev>
				<x path="Int"/>
				<haxe_doc>The device on which stat resides.</haxe_doc>
			</dev>
			<ctime>
				<c path="Date"/>
				<haxe_doc>The creation time for the file (not all file systems support this).</haxe_doc>
			</ctime>
			<atime>
				<c path="Date"/>
				<haxe_doc>The last access time for the file (when enabled by the file system).</haxe_doc>
			</atime>
		</a>
		<haxe_doc>File information, as given by `sys.FileSystem.stat`.</haxe_doc>
	</typedef>
	<typedef path="sys.io.FileHandle" params="" file="/usr/share/haxe/std/hl/_std/sys/io/File.hx" module="sys.io.File"><c path="hl.Abstract"><c path="Shl_fdesc"/></c></typedef>
	<class path="sys.net.Host" params="" file="/usr/share/haxe/std/hl/_std/sys/net/Host.hx">
		<host_resolve set="method" line="50" static="1">
			<f a="name">
				<x path="hl.Bytes"/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"host_resolve"</e>
</m></meta>
		</host_resolve>
		<host_to_string set="method" line="58" static="1">
			<f a="host">
				<x path="Int"/>
				<x path="hl.Bytes"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"host_to_string"</e>
</m></meta>
		</host_to_string>
		<host public="1" set="null">
			<c path="String"/>
			<haxe_doc>The provided host string.</haxe_doc>
		</host>
		<ip public="1" set="null">
			<x path="Int"/>
			<haxe_doc>The actual IP corresponding to the host.</haxe_doc>
		</ip>
		<toString public="1" set="method" line="38">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the IP representation of the host</haxe_doc>
		</toString>
		<new public="1" set="method" line="31">
			<f a="name">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Creates a new Host : the name can be an IP in the form "127.0.0.1" or an host name such as "google.com", in which case
		the corresponding IP address is resolved using DNS. An exception occur if the host name could not be found.</haxe_doc>
		</new>
		<haxe_doc>A given IP host name.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
		</meta>
	</class>
	<class path="sys.net._Socket.SocketOutput" params="" file="/usr/share/haxe/std/hl/_std/sys/net/Socket.hx" private="1" module="sys.net.Socket">
		<extends path="haxe.io.Output"/>
		<socket_send_char set="method" line="65" static="1">
			<f a="s:c">
				<t path="sys.net.SocketHandle"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"socket_send_char"</e>
</m></meta>
		</socket_send_char>
		<socket_send set="method" line="69" static="1">
			<f a="s:bytes:pos:len">
				<t path="sys.net.SocketHandle"/>
				<x path="hl.Bytes"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"socket_send"</e>
</m></meta>
		</socket_send>
		<sock><c path="sys.net.Socket"/></sock>
		<writeByte public="1" set="method" line="40" override="1"><f a="c">
	<x path="Int"/>
	<x path="Void"/>
</f></writeByte>
		<writeBytes public="1" set="method" line="49" override="1"><f a="buf:pos:len">
	<c path="haxe.io.Bytes"/>
	<x path="Int"/>
	<x path="Int"/>
	<x path="Int"/>
</f></writeBytes>
		<new public="1" set="method" line="36"><f a="s">
	<c path="sys.net.Socket"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="sys.net._Socket.SocketInput" params="" file="/usr/share/haxe/std/hl/_std/sys/net/Socket.hx" private="1" module="sys.net.Socket">
		<extends path="haxe.io.Input"/>
		<socket_recv_char set="method" line="111" static="1">
			<f a="s">
				<t path="sys.net.SocketHandle"/>
				<x path="Int"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"socket_recv_char"</e>
</m></meta>
		</socket_recv_char>
		<sock><c path="sys.net.Socket"/></sock>
		<readByte public="1" set="method" line="81" override="1"><f a=""><x path="Int"/></f></readByte>
		<new public="1" set="method" line="77"><f a="s">
	<c path="sys.net.Socket"/>
	<x path="Void"/>
</f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="sys.net.Socket" params="" file="/usr/share/haxe/std/hl/_std/sys/net/Socket.hx">
		<socket_init set="method" line="278" static="1">
			<f a=""><x path="Void"/></f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"socket_init"</e>
</m></meta>
		</socket_init>
		<socket_new set="method" line="280" static="1">
			<f a="udp">
				<x path="Bool"/>
				<t path="sys.net.SocketHandle"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"socket_new"</e>
</m></meta>
		</socket_new>
		<socket_close set="method" line="284" static="1">
			<f a="s">
				<t path="sys.net.SocketHandle"/>
				<x path="Void"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"socket_close"</e>
</m></meta>
		</socket_close>
		<socket_listen set="method" line="290" static="1">
			<f a="s:count">
				<t path="sys.net.SocketHandle"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"socket_listen"</e>
</m></meta>
		</socket_listen>
		<socket_bind set="method" line="294" static="1">
			<f a="s:host:port">
				<t path="sys.net.SocketHandle"/>
				<x path="Int"/>
				<x path="Int"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"socket_bind"</e>
</m></meta>
		</socket_bind>
		<socket_accept set="method" line="298" static="1">
			<f a="s">
				<t path="sys.net.SocketHandle"/>
				<t path="sys.net.SocketHandle"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"socket_accept"</e>
</m></meta>
		</socket_accept>
		<socket_peer set="method" line="302" static="1">
			<f a="s:host:port">
				<t path="sys.net.SocketHandle"/>
				<x path="hl.Ref"><x path="Int"/></x>
				<x path="hl.Ref"><x path="Int"/></x>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"socket_peer"</e>
</m></meta>
		</socket_peer>
		<socket_set_blocking set="method" line="318" static="1">
			<f a="s:b">
				<t path="sys.net.SocketHandle"/>
				<x path="Bool"/>
				<x path="Bool"/>
			</f>
			<meta><m n=":hlNative">
	<e>"std"</e>
	<e>"socket_set_blocking"</e>
</m></meta>
		</socket_set_blocking>
		<__s><t path="sys.net.SocketHandle"/></__s>
		<input public="1" set="null">
			<c path="haxe.io.Input"/>
			<haxe_doc>The stream on which you can read available data. By default the stream is blocking until the requested data is available,
		use `setBlocking(false)` or `setTimeout` to prevent infinite waiting.</haxe_doc>
		</input>
		<output public="1" set="null">
			<c path="haxe.io.Output"/>
			<haxe_doc>The stream on which you can send data. Please note that in case the output buffer you will block while writing the data, use `setBlocking(false)` or `setTimeout` to prevent that.</haxe_doc>
		</output>
		<init set="method" line="133"><f a=""><x path="Void"/></f></init>
		<close public="1" set="method" line="140">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Closes the socket : make sure to properly close all your sockets or you will crash when you run out of file descriptors.</haxe_doc>
		</close>
		<write public="1" set="method" line="151">
			<f a="content">
				<c path="String"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Write the whole data to the socket output.

		*Note*: this is **not** meant to be used together with `setBlocking(false)`, as
		`haxe.io.Error.Blocked` may be thrown mid-write with no indication of how many bytes have been written.
		`output.writeBytes()` should be used instead as it returns this information.</haxe_doc>
		</write>
		<listen public="1" set="method" line="160">
			<f a="connections">
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Allow the socket to listen for incoming questions. The parameter tells how many pending connections we can have until they get refused. Use `accept()` to accept incoming connections.</haxe_doc>
		</listen>
		<bind public="1" set="method" line="170">
			<f a="host:port">
				<c path="sys.net.Host"/>
				<x path="Int"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Bind the socket to the given host/port so it can afterwards listen for connections there.</haxe_doc>
		</bind>
		<accept public="1" set="method" line="175">
			<f a=""><c path="sys.net.Socket"/></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Accept a new connected client. This will return a connected socket on which you can read/write some data.</haxe_doc>
		</accept>
		<peer public="1" set="method" line="186">
			<f a=""><a>
	<port><x path="Int"/></port>
	<host><c path="sys.net.Host"/></host>
</a></f>
			<meta><m n=":has_untyped"/></meta>
			<haxe_doc>Return the information about the other side of a connected socket.</haxe_doc>
		</peer>
		<setBlocking public="1" set="method" line="213">
			<f a="b">
				<x path="Bool"/>
				<x path="Void"/>
			</f>
			<haxe_doc>Change the blocking mode of the socket. A blocking socket is the default behavior. A non-blocking socket will abort blocking operations immediately by throwing a haxe.io.Error.Blocked value.</haxe_doc>
		</setBlocking>
		<new public="1" set="method" line="129">
			<f a=""><x path="Void"/></f>
			<haxe_doc>Creates a new unconnected socket.</haxe_doc>
		</new>
		<haxe_doc>A TCP socket class : allow you to both connect to a given server and exchange messages or start your own server and wait for connections.</haxe_doc>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
			<m n=":coreApi"/>
			<m n=":keepInit"/>
		</meta>
	</class>
	<class path="util.IServer" params="" file="util/Server.hx" module="util.Server" interface="1"><meta><m n=":keep"/></meta></class>
	<class path="util.ServingServer" params="" file="util/Server.hx" module="util.Server">
		<implements path="util.IServer"/>
		<serverInstance><c path="util.serverHelper.HTTPServer"/></serverInstance>
		<listen public="1" set="method" line="39"><f a="port:callback">
	<x path="Int"/>
	<f a=""><x path="Void"/></f>
	<x path="Void"/>
</f></listen>
		<autoRegisterPages public="1" set="method" line="51"><f a="pages">
	<c path="Array"><c path="lib.bases.AbstractPage"/></c>
	<x path="Void"/>
</f></autoRegisterPages>
		<addPagesToServerRoutes public="1" set="method" line="56"><f a="pages">
	<c path="Array"><c path="lib.bases.AbstractPage"/></c>
	<x path="Void"/>
</f></addPagesToServerRoutes>
		<serve public="1" set="method" line="67"><f a="method:path:callback">
	<c path="String"/>
	<c path="String"/>
	<f a="req:res">
		<d/>
		<d/>
		<x path="Void"/>
	</f>
	<x path="Void"/>
</f></serve>
		<generateFiles public="1" set="method" line="73"><f a=""><x path="Void"/></f></generateFiles>
		<Pages><c path="Array"><c path="lib.bases.AbstractPage"/></c></Pages>
		<new public="1" set="method" line="21"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="util.serverHelper.HTTPServer" params="" file="util/serverHelper/HTTPServer.hx">
		<existsing public="1" expr="&quot;Yes&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>"Yes"</e></m></meta>
		</existsing>
		<listen public="1" set="method" line="15"><f a=""><x path="Void"/></f></listen>
		<new public="1" set="method" line="11"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="util.serverHelper.SocketInformation" params="" file="util/serverHelper/HTTPServer.hx" module="util.serverHelper.HTTPServer">
		<Response public="1" expr="new Response()">
			<c path="util.serverHelper.Response"/>
			<meta><m n=":value"><e>new Response()</e></m></meta>
		</Response>
		<Killable public="1" expr="false">
			<x path="Bool"/>
			<meta><m n=":value"><e>false</e></m></meta>
		</Killable>
		<new public="1" set="method" line="79"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
	<class path="util.serverHelper.BaseHeaders" params="" file="util/serverHelper/HTTPServer.hx" module="util.serverHelper.HTTPServer" abstract="1">
		<new public="1" set="method" line="90"><f a=""><x path="Void"/></f></new>
		<meta><m n=":keep"/></meta>
	</class>
	<class path="util.serverHelper.Response" params="" file="util/serverHelper/HTTPServer.hx" module="util.serverHelper.HTTPServer">
		<extends path="util.serverHelper.BaseHeaders"/>
		<_Content public="1" expr="&quot;&quot;">
			<c path="String"/>
			<meta><m n=":value"><e>""</e></m></meta>
		</_Content>
		<write public="1" set="method" line="108"><f a="line">
	<c path="String"/>
	<x path="Void"/>
</f></write>
		<new public="1" set="method" line="106"><f a=""><x path="Void"/></f></new>
		<meta>
			<m n=":keep"/>
			<m n=":directlyUsed"/>
		</meta>
	</class>
</haxe>